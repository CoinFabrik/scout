#![feature(inherent_associated_types)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;

mod assert_violation {
    impl ::ink::env::ContractEnv for
        AssertViolation {
        type
        Env
        =
        ::ink::env::DefaultEnvironment;
    }
    type Environment = <AssertViolation as ::ink::env::ContractEnv>::Env;
    type AccountId
        =
        <<AssertViolation as ::ink::env::ContractEnv>::Env as
        ::ink::env::Environment>::AccountId;
    type Balance
        =
        <<AssertViolation as ::ink::env::ContractEnv>::Env as
        ::ink::env::Environment>::Balance;
    type Hash
        =
        <<AssertViolation as ::ink::env::ContractEnv>::Env as
        ::ink::env::Environment>::Hash;
    type Timestamp
        =
        <<AssertViolation as ::ink::env::ContractEnv>::Env as
        ::ink::env::Environment>::Timestamp;
    type BlockNumber
        =
        <<AssertViolation as ::ink::env::ContractEnv>::Env as
        ::ink::env::Environment>::BlockNumber;
    type ChainExtension
        =
        <<AssertViolation as ::ink::env::ContractEnv>::Env as
        ::ink::env::Environment>::ChainExtension;
    const MAX_EVENT_TOPICS: usize =
        <<AssertViolation as ::ink::env::ContractEnv>::Env as
            ::ink::env::Environment>::MAX_EVENT_TOPICS;
    const _: () =
        {
                struct Check {
                    salt: (),
                    field_0: u128,
                }
            };
    #[doc = " Defines the storage of your contract."]
    #[doc = " Add new fields to the below struct in order"]
    #[doc = " to add new static storage fields to your contract."]
    #[cfg(not(feature = "__ink_dylint_Storage"))]
    struct AssertViolation {
        value: <u128 as
        ::ink::storage::traits::AutoStorableHint<::ink::storage::traits::ManualKey<4281705220u32,
        ()>>>::Type,
    }
    const _: () =
        {
                impl <__ink_generic_salt>
                    ::ink::storage::traits::StorableHint<__ink_generic_salt> for
                    AssertViolation where
                    __ink_generic_salt: ::ink::storage::traits::StorageKey {
                    type
                    Type
                    =
                    AssertViolation;
                    type
                    PreferredKey
                    =
                    ::ink::storage::traits::AutoKey;
                }
            };
    const _: () =
        {
                impl ::ink::storage::traits::StorageKey for AssertViolation {
                    const KEY: ::ink::primitives::Key =
                        <() as ::ink::storage::traits::StorageKey>::KEY; }
                    };
            const _: () =
                {
                        impl ::ink::storage::traits::Storable for AssertViolation {
                            #[inline(always)]
                            #[allow(non_camel_case_types)]
                            fn decode<__ink_I, '_>(__input: &'_ mut __ink_I)
                                -> ::core::result::Result<Self, ::scale::Error> where
                                __ink_I: ::scale::Input {
                                    ::core::result::Result::Ok(AssertViolation{
                                            value:
                                                match #[lang = "branch"](<<u128 as
                                                                        ::ink::storage::traits::AutoStorableHint<::ink::storage::traits::ManualKey<4281705220u32,
                                                                        ()>>>::Type as
                                                                        ::ink::storage::traits::Storable>::decode(__input)) {
                                                        #[lang = "Break"] {  0: residual } =>
                                                            #[allow(unreachable_code)]
                                                            return #[lang = "from_residual"](residual),
                                                        #[lang = "Continue"] {  0: val } =>
                                                            #[allow(unreachable_code)]
                                                            val,
                                                    },})
                                }
                            #[inline(always)]
                            #[allow(non_camel_case_types)]
                            fn encode<__ink_O, '_,
                                '_>(self: &'_ Self, __dest: &'_ mut __ink_O) where
                                __ink_O: ::scale::Output +
                                ?::core::marker::Sized {
                                    match self {
                                            AssertViolation {  value: __binding_0 } => {
                                                {
                                                        ::ink::storage::traits::Storable::encode(__binding_0,
                                                            __dest);
                                                    }
                                            }
                                        }
                                }
                        }
                    };
            #[allow(non_upper_case_globals, unused_attributes,
            unused_qualifications)]
            const _: () =
                {
                        impl ::scale_info::TypeInfo for AssertViolation {
                            type
                            Identity
                            =
                            Self;
                            fn type_info()
                                ->
                                    ::scale_info::Type {
                                    ::scale_info::Type::builder().path(::scale_info::Path::new("AssertViolation",
                                                        "assert_violation::assert_violation")).type_params(














                                                ::alloc::vec::Vec::new()).docs(&["Defines the storage of your contract.",
                                                        "Add new fields to the below struct in order",
                                                        "to add new static storage fields to your contract."]).composite(::scale_info::build::Fields::named().field(|f|
                                                f.ty::<<u128 as
                                                            ::ink::storage::traits::AutoStorableHint<::ink::storage::traits::ManualKey<4281705220u32,
                                                            ()>>>::Type>().name("value").type_name("<u128 as::ink::storage::traits::AutoStorableHint<::ink::storage\n::traits::ManualKey<4281705220u32, ()>,>>::Type")))
                                }
                        }
                    };
            const _: () =
                {
                        impl ::ink::storage::traits::StorageLayout for
                            AssertViolation {
                            fn layout<'_>(__key: &'_ ::ink::primitives::Key)
                                ->
                                    ::ink::metadata::layout::Layout {
                                    ::ink::metadata::layout::Layout::Struct(::ink::metadata::layout::StructLayout::new("AssertViolation",
                                            [::ink::metadata::layout::FieldLayout::new("value",
                                                        <<u128 as
                                                                ::ink::storage::traits::AutoStorableHint<::ink::storage::traits::ManualKey<4281705220u32,
                                                                ()>>>::Type as
                                                                ::ink::storage::traits::StorageLayout>::layout(__key))]))
                                }
                        }
                    };
            const _: () =
                {
                        impl ::ink::reflect::ContractName for AssertViolation {
                            const NAME: &'static str = "AssertViolation"; } };
                    const _: () =
                        {
                                impl <'a> ::ink::codegen::Env for &'a AssertViolation {
                                    type
                                    EnvAccess
                                    =
                                    ::ink::EnvAccess<'a,
                                    <AssertViolation as ::ink::env::ContractEnv>::Env>;
                                    fn env(self: Self)
                                        ->
                                            Self::EnvAccess {
                                            <<Self as ::ink::codegen::Env>::EnvAccess as
                                                    ::core::default::Default>::default()
                                        }
                                }
                                impl <'a> ::ink::codegen::StaticEnv for AssertViolation {
                                    type
                                    EnvAccess
                                    =
                                    ::ink::EnvAccess<'static,
                                    <AssertViolation as ::ink::env::ContractEnv>::Env>;
                                    fn env()
                                        ->
                                            Self::EnvAccess {
                                            <<Self as ::ink::codegen::StaticEnv>::EnvAccess as
                                                    ::core::default::Default>::default()
                                        }
                                }
                            };
                    const _: () =
                        {
                                #[allow(unused_imports)]
                                use ::ink::codegen::{};
                                #[allow(unused_imports)]
                                use ::ink::codegen::Env as _;
                                #[allow(unused_imports)]
                                use ::ink::codegen::StaticEnv as _;
                            };
                    impl ::ink::reflect::DispatchableConstructorInfo<2611912030u32>
                        for AssertViolation {
                        type
                        Input
                        =
                        u128;
                        type
                        Output
                        =
                        Self;
                        type
                        Storage
                        =
                        AssertViolation;
                        type
                        Error
                        =
                        <::ink::reflect::ConstructorOutputValue<Self> as
                        ::ink::reflect::ConstructorOutput<AssertViolation>>::Error;
                        const IS_RESULT: ::core::primitive::bool =
                            <::ink::reflect::ConstructorOutputValue<Self> as
                                ::ink::reflect::ConstructorOutput::<AssertViolation>>::IS_RESULT;
                            const CALLABLE: fn(: Self::Input) -> Self::Output =
                                |__ink_binding_0| { AssertViolation::new(__ink_binding_0) };
                                const PAYABLE: ::core::primitive::bool = false;
                                    const SELECTOR: [::core::primitive::u8; 4usize] =
                                        [155u8, 174u8, 157u8, 94u8];
                                        const LABEL: &'static ::core::primitive::str = "new"; }
                                            impl ::ink::reflect::DispatchableMessageInfo<3738161147u32>
                                                for AssertViolation {
                                                type
                                                Input
                                                =
                                                u128;
                                                type
                                                Output
                                                =
                                                bool;
                                                type
                                                Storage
                                                =
                                                AssertViolation;
                                                const CALLABLE:
                                                    for<'_> fn(: &'_ mut Self::Storage, : Self::Input)
                                                        -> Self::Output =
                                                    |storage, __ink_binding_0|
                                                        {
                                                                AssertViolation::assert_if_greater_than_10(storage,
                                                                    __ink_binding_0)
                                                            };
                                                    const SELECTOR: [::core::primitive::u8; 4usize] =
                                                        [222u8, 207u8, 207u8, 251u8];
                                                        const PAYABLE: ::core::primitive::bool = false;
                                                            const MUTATES: ::core::primitive::bool = false;
                                                                const LABEL: &'static ::core::primitive::str =
                                                                    "assert_if_greater_than_10"; }
                                                                    impl ::ink::reflect::DispatchableMessageInfo<786546522u32>
                                                                        for AssertViolation {
                                                                        type
                                                                        Input
                                                                        =
                                                                        u128;
                                                                        type
                                                                        Output
                                                                        =
                                                                        Result<(), Error>;
                                                                        type
                                                                        Storage
                                                                        =
                                                                        AssertViolation;
                                                                        const CALLABLE:
                                                                            for<'_> fn(: &'_ mut Self::Storage, : Self::Input)
                                                                                -> Self::Output =
                                                                            |storage, __ink_binding_0|
                                                                                {
                                                                                        AssertViolation::revert_if_greater_than_10(storage,
                                                                                            __ink_binding_0)
                                                                                    };
                                                                            const SELECTOR: [::core::primitive::u8; 4usize] =
                                                                                [46u8, 225u8, 191u8, 90u8];
                                                                                const PAYABLE: ::core::primitive::bool = false;
                                                                                    const MUTATES: ::core::primitive::bool = false;
                                                                                        const LABEL: &'static ::core::primitive::str =
                                                                                            "revert_if_greater_than_10"; }
                                                                                            const _: () =
                                                                                                {
                                                                                                        #[allow(non_camel_case_types)]
                                                                                                        enum __ink_ConstructorDecoder {
                                                                                                            Constructor0(<AssertViolation as
                                                                                                                    ::ink::reflect::DispatchableConstructorInfo<2611912030u32>>::Input),
                                                                                                        }
                                                                                                        impl ::ink::reflect::DecodeDispatch for
                                                                                                            __ink_ConstructorDecoder {
                                                                                                            fn decode_dispatch<I, '_>(input: &'_ mut I)
                                                                                                                ->
                                                                                                                    ::core::result::Result<Self, ::ink::reflect::DispatchError>
                                                                                                                where
                                                                                                                I: ::scale::Input {
                                                                                                                    const CONSTRUCTOR_0: [::core::primitive::u8; 4usize] =
                                                                                                                        <AssertViolation as
                                                                                                                            ::ink::reflect::DispatchableConstructorInfo::<2611912030u32>>::SELECTOR;
                                                                                                                    match match #[lang = "branch"](<[::core::primitive::u8; 4usize]
                                                                                                                                                            as
                                                                                                                                                            ::scale::Decode>::decode(input).map_err(|_|
                                                                                                                                                        ::ink::reflect::DispatchError::InvalidSelector)) {
                                                                                                                                        #[lang = "Break"] {  0: residual } =>
                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                            return #[lang = "from_residual"](residual),
                                                                                                                                        #[lang = "Continue"] {  0: val } =>
                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                            val,
                                                                                                                                    } {
                                                                                                                            CONSTRUCTOR_0 => {
                                                                                                                                ::core::result::Result::Ok(Self::Constructor0(match #[lang = "branch"](<<AssertViolation
                                                                                                                                                                    as
                                                                                                                                                                    ::ink::reflect::DispatchableConstructorInfo<2611912030u32>>::Input
                                                                                                                                                                    as
                                                                                                                                                                    ::scale::Decode>::decode(input).map_err(|_|
                                                                                                                                                                ::ink::reflect::DispatchError::InvalidParameters)) {
                                                                                                                                                #[lang = "Break"] {  0: residual } =>
                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                    return #[lang = "from_residual"](residual),
                                                                                                                                                #[lang = "Continue"] {  0: val } =>
                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                    val,
                                                                                                                                            }))
                                                                                                                            }
                                                                                                                            _invalid =>
                                                                                                                                ::core::result::Result::Err(::ink::reflect::DispatchError::UnknownSelector),
                                                                                                                        }
                                                                                                                }
                                                                                                        }
                                                                                                        impl ::scale::Decode for __ink_ConstructorDecoder {
                                                                                                            fn decode<I, '_>(input: &'_ mut I)
                                                                                                                -> ::core::result::Result<Self, ::scale::Error> where
                                                                                                                I: ::scale::Input {
                                                                                                                    <Self as
                                                                                                                                ::ink::reflect::DecodeDispatch>::decode_dispatch(input).map_err(::core::convert::Into::into)
                                                                                                                }
                                                                                                        }
                                                                                                        impl ::ink::reflect::ExecuteDispatchable for
                                                                                                            __ink_ConstructorDecoder {
                                                                                                            #[allow(clippy :: nonminimal_bool)]
                                                                                                            fn execute_dispatchable(self: Self)
                                                                                                                ->
                                                                                                                    ::core::result::Result<(),
                                                                                                                    ::ink::reflect::DispatchError> {
                                                                                                                    match self {
                                                                                                                            Self::Constructor0(input) => {
                                                                                                                                if {
                                                                                                                                                    false ||
                                                                                                                                                        {
                                                                                                                                                                let constructor_0 = false;
                                                                                                                                                                let constructor_0 =
                                                                                                                                                                    <AssertViolation as
                                                                                                                                                                        ::ink::reflect::DispatchableConstructorInfo::<2611912030u32>>::PAYABLE;
                                                                                                                                                                constructor_0
                                                                                                                                                            }
                                                                                                                                                } &&
                                                                                                                                            !<AssertViolation as
                                                                                                                                                    ::ink::reflect::DispatchableConstructorInfo::<2611912030u32>>::PAYABLE
                                                                                                                                        {
                                                                                                                                                match #[lang = "branch"](::ink::codegen::deny_payment::<<AssertViolation
                                                                                                                                                                        as ::ink::env::ContractEnv>::Env>()) {
                                                                                                                                                        #[lang = "Break"] {  0: residual } =>
                                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                                            return #[lang = "from_residual"](residual),
                                                                                                                                                        #[lang = "Continue"] {  0: val } =>
                                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                                            val,
                                                                                                                                                    };
                                                                                                                                            }
                                                                                                                                        let result:
                                                                                                                                                <AssertViolation as
                                                                                                                                                ::ink::reflect::DispatchableConstructorInfo<2611912030u32>>::Output =
                                                                                                                                            <AssertViolation as
                                                                                                                                                    ::ink::reflect::DispatchableConstructorInfo::<2611912030u32>>::CALLABLE(input);
                                                                                                                                        let output_value =
                                                                                                                                            ::ink::reflect::ConstructorOutputValue::new(result);
                                                                                                                                        let output_result =
                                                                                                                                            <::ink::reflect::ConstructorOutputValue<<AssertViolation as
                                                                                                                                                    ::ink::reflect::DispatchableConstructorInfo<2611912030u32>>::Output>
                                                                                                                                                    as
                                                                                                                                                    ::ink::reflect::ConstructorOutput::<AssertViolation>>::as_result(&output_value);
                                                                                                                                        if let ::core::result::Result::Ok(contract) =
                                                                                                                                                    output_result.as_ref()
                                                                                                                                                {
                                                                                                                                                        ::ink::env::set_contract_storage::<::ink::primitives::Key,
                                                                                                                                                                AssertViolation>(&<AssertViolation as
                                                                                                                                                                    ::ink::storage::traits::StorageKey>::KEY, contract);
                                                                                                                                                    }
                                                                                                                                                ::ink::env::return_value::<::ink::ConstructorResult<::core::result::Result<(),
                                                                                                                                                        &<::ink::reflect::ConstructorOutputValue<<AssertViolation as
                                                                                                                                                        ::ink::reflect::DispatchableConstructorInfo<2611912030u32>>::Output>
                                                                                                                                                        as
                                                                                                                                                        ::ink::reflect::ConstructorOutput<AssertViolation>>::Error>>>(::ink::env::ReturnFlags::new_with_reverted(output_result.is_err()),
                                                                                                                                                    &::ink::ConstructorResult::Ok(output_result.map(|_| ())));
                                                                                                                                            } } }
                                                                                                                        }
                                                                                                                        impl ::ink::reflect::ContractConstructorDecoder for
                                                                                                                            AssertViolation {
                                                                                                                            type
                                                                                                                            Type
                                                                                                                            =
                                                                                                                            __ink_ConstructorDecoder;
                                                                                                                        } };
                                                                                                            const _: () =
                                                                                                                {
                                                                                                                        #[allow(non_camel_case_types)]
                                                                                                                        enum __ink_MessageDecoder {
                                                                                                                            Message0(<AssertViolation as
                                                                                                                                    ::ink::reflect::DispatchableMessageInfo<3738161147u32>>::Input),
                                                                                                                            Message1(<AssertViolation as
                                                                                                                                    ::ink::reflect::DispatchableMessageInfo<786546522u32>>::Input),
                                                                                                                        }
                                                                                                                        impl ::ink::reflect::DecodeDispatch for __ink_MessageDecoder
                                                                                                                            {
                                                                                                                            fn decode_dispatch<I, '_>(input: &'_ mut I)
                                                                                                                                ->
                                                                                                                                    ::core::result::Result<Self, ::ink::reflect::DispatchError>
                                                                                                                                where
                                                                                                                                I: ::scale::Input {
                                                                                                                                    const MESSAGE_0: [::core::primitive::u8; 4usize] =
                                                                                                                                        <AssertViolation as
                                                                                                                                            ::ink::reflect::DispatchableMessageInfo::<3738161147u32>>::SELECTOR;
                                                                                                                                    const MESSAGE_1: [::core::primitive::u8; 4usize] =
                                                                                                                                        <AssertViolation as
                                                                                                                                            ::ink::reflect::DispatchableMessageInfo::<786546522u32>>::SELECTOR;
                                                                                                                                    match match #[lang = "branch"](<[::core::primitive::u8; 4usize]
                                                                                                                                                                            as
                                                                                                                                                                            ::scale::Decode>::decode(input).map_err(|_|
                                                                                                                                                                        ::ink::reflect::DispatchError::InvalidSelector)) {
                                                                                                                                                        #[lang = "Break"] {  0: residual } =>
                                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                                            return #[lang = "from_residual"](residual),
                                                                                                                                                        #[lang = "Continue"] {  0: val } =>
                                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                                            val,
                                                                                                                                                    } {
                                                                                                                                            MESSAGE_0 => {
                                                                                                                                                ::core::result::Result::Ok(Self::Message0(match #[lang = "branch"](<<AssertViolation
                                                                                                                                                                                    as
                                                                                                                                                                                    ::ink::reflect::DispatchableMessageInfo<3738161147u32>>::Input
                                                                                                                                                                                    as
                                                                                                                                                                                    ::scale::Decode>::decode(input).map_err(|_|
                                                                                                                                                                                ::ink::reflect::DispatchError::InvalidParameters)) {
                                                                                                                                                                #[lang = "Break"] {  0: residual } =>
                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                    return #[lang = "from_residual"](residual),
                                                                                                                                                                #[lang = "Continue"] {  0: val } =>
                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                    val,
                                                                                                                                                            }))
                                                                                                                                            }
                                                                                                                                            MESSAGE_1 => {
                                                                                                                                                ::core::result::Result::Ok(Self::Message1(match #[lang = "branch"](<<AssertViolation
                                                                                                                                                                                    as
                                                                                                                                                                                    ::ink::reflect::DispatchableMessageInfo<786546522u32>>::Input
                                                                                                                                                                                    as
                                                                                                                                                                                    ::scale::Decode>::decode(input).map_err(|_|
                                                                                                                                                                                ::ink::reflect::DispatchError::InvalidParameters)) {
                                                                                                                                                                #[lang = "Break"] {  0: residual } =>
                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                    return #[lang = "from_residual"](residual),
                                                                                                                                                                #[lang = "Continue"] {  0: val } =>
                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                    val,
                                                                                                                                                            }))
                                                                                                                                            }
                                                                                                                                            _invalid =>
                                                                                                                                                ::core::result::Result::Err(::ink::reflect::DispatchError::UnknownSelector),
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        }
                                                                                                                        impl ::scale::Decode for __ink_MessageDecoder {
                                                                                                                            fn decode<I, '_>(input: &'_ mut I)
                                                                                                                                -> ::core::result::Result<Self, ::scale::Error> where
                                                                                                                                I: ::scale::Input {
                                                                                                                                    <Self as
                                                                                                                                                ::ink::reflect::DecodeDispatch>::decode_dispatch(input).map_err(::core::convert::Into::into)
                                                                                                                                }
                                                                                                                        }
                                                                                                                        fn push_contract(contract:
                                                                                                                                ::core::mem::ManuallyDrop<AssertViolation>,
                                                                                                                            mutates:
                                                                                                                                bool) {
                                                                                                                                if mutates
                                                                                                                                        {
                                                                                                                                                ::ink::env::set_contract_storage::<::ink::primitives::Key,
                                                                                                                                                        AssertViolation>(&<AssertViolation as
                                                                                                                                                            ::ink::storage::traits::StorageKey>::KEY, &contract);
                                                                                                                                            }
                                                                                                                                    }
                                                                                                                                impl ::ink::reflect::ExecuteDispatchable for
                                                                                                                                    __ink_MessageDecoder {
                                                                                                                                    #[allow(clippy :: nonminimal_bool, clippy ::
                                                                                                                                    let_unit_value)]
                                                                                                                                    fn execute_dispatchable(self: Self)
                                                                                                                                        ->
                                                                                                                                            ::core::result::Result<(),
                                                                                                                                            ::ink::reflect::DispatchError> {
                                                                                                                                            let key =
                                                                                                                                                <AssertViolation as
                                                                                                                                                    ::ink::storage::traits::StorageKey>::KEY;
                                                                                                                                            let mut contract:
                                                                                                                                                    ::core::mem::ManuallyDrop<AssertViolation> =
                                                                                                                                                ::core::mem::ManuallyDrop::new(match ::ink::env::get_contract_storage(&key)
                                                                                                                                                                {
                                                                                                                                                            ::core::result::Result::Ok(::core::option::Option::Some(value))
                                                                                                                                                                => value,
                                                                                                                                                            ::core::result::Result::Ok(::core::option::Option::None) =>
                                                                                                                                                                {
                                                                                                                                                                ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["storage entry was empty"],
                                                                                                                                                                        &[]))
                                                                                                                                                            }
                                                                                                                                                            ::core::result::Result::Err(_) => {
                                                                                                                                                                ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["could not properly decode storage entry"],
                                                                                                                                                                        &[]))
                                                                                                                                                            }
                                                                                                                                                        });
                                                                                                                                            match self {
                                                                                                                                                    Self::Message0(input) => {
                                                                                                                                                        if {
                                                                                                                                                                            false ||
                                                                                                                                                                                    {
                                                                                                                                                                                            let message_0 = false;
                                                                                                                                                                                            let message_0 =
                                                                                                                                                                                                <AssertViolation as
                                                                                                                                                                                                    ::ink::reflect::DispatchableMessageInfo::<3738161147u32>>::PAYABLE;
                                                                                                                                                                                            message_0
                                                                                                                                                                                        } ||
                                                                                                                                                                                {
                                                                                                                                                                                        let message_1 = false;
                                                                                                                                                                                        let message_1 =
                                                                                                                                                                                            <AssertViolation as
                                                                                                                                                                                                ::ink::reflect::DispatchableMessageInfo::<786546522u32>>::PAYABLE;
                                                                                                                                                                                        message_1
                                                                                                                                                                                    }
                                                                                                                                                                        } &&
                                                                                                                                                                    !<AssertViolation as
                                                                                                                                                                            ::ink::reflect::DispatchableMessageInfo::<3738161147u32>>::PAYABLE
                                                                                                                                                                {
                                                                                                                                                                        match #[lang = "branch"](::ink::codegen::deny_payment::<<AssertViolation
                                                                                                                                                                                                as ::ink::env::ContractEnv>::Env>()) {
                                                                                                                                                                                #[lang = "Break"] {  0: residual } =>
                                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                                    return #[lang = "from_residual"](residual),
                                                                                                                                                                                #[lang = "Continue"] {  0: val } =>
                                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                                    val,
                                                                                                                                                                            };
                                                                                                                                                                    }
                                                                                                                                                                let result:
                                                                                                                                                                        <AssertViolation as
                                                                                                                                                                        ::ink::reflect::DispatchableMessageInfo<3738161147u32>>::Output =
                                                                                                                                                                    <AssertViolation as
                                                                                                                                                                            ::ink::reflect::DispatchableMessageInfo::<3738161147u32>>::CALLABLE(&mut contract,
                                                                                                                                                                        input);
                                                                                                                                                                let is_reverted =
                                                                                                                                                                    {
                                                                                                                                                                                #[allow(unused_imports)]
                                                                                                                                                                                use ::ink::result_info::IsResultTypeFallback as _;
                                                                                                                                                                                ::ink::result_info::IsResultType<<AssertViolation as
                                                                                                                                                                                    ::ink::reflect::DispatchableMessageInfo<3738161147u32>>::Output>::VALUE
                                                                                                                                                                            } &&
                                                                                                                                                                        {
                                                                                                                                                                                #[allow(unused_imports)]
                                                                                                                                                                                use ::ink::result_info::IsResultErrFallback as _;
                                                                                                                                                                                ::ink::result_info::IsResultErr(&result).value()
                                                                                                                                                                            };
                                                                                                                                                                if !is_reverted
                                                                                                                                                                        {
                                                                                                                                                                                push_contract(contract,
                                                                                                                                                                                    <AssertViolation as
                                                                                                                                                                                        ::ink::reflect::DispatchableMessageInfo::<3738161147u32>>::MUTATES);
                                                                                                                                                                            }
                                                                                                                                                                        ::ink::env::return_value::<::ink::MessageResult<<AssertViolation
                                                                                                                                                                                as
                                                                                                                                                                                ::ink::reflect::DispatchableMessageInfo<3738161147u32>>::Output>>(::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                                                                                                                                                                            &::ink::MessageResult::Ok(result))
                                                                                                                                                                    }
                                                                                                                                                                    Self::Message1(input) => {
                                                                                                                                                                        if {
                                                                                                                                                                                            false ||
                                                                                                                                                                                                    {
                                                                                                                                                                                                            let message_0 = false;
                                                                                                                                                                                                            let message_0 =
                                                                                                                                                                                                                <AssertViolation as
                                                                                                                                                                                                                    ::ink::reflect::DispatchableMessageInfo::<3738161147u32>>::PAYABLE;
                                                                                                                                                                                                            message_0
                                                                                                                                                                                                        } ||
                                                                                                                                                                                                {
                                                                                                                                                                                                        let message_1 = false;
                                                                                                                                                                                                        let message_1 =
                                                                                                                                                                                                            <AssertViolation as
                                                                                                                                                                                                                ::ink::reflect::DispatchableMessageInfo::<786546522u32>>::PAYABLE;
                                                                                                                                                                                                        message_1
                                                                                                                                                                                                    }
                                                                                                                                                                                        } &&
                                                                                                                                                                                    !<AssertViolation as
                                                                                                                                                                                            ::ink::reflect::DispatchableMessageInfo::<786546522u32>>::PAYABLE
                                                                                                                                                                                {
                                                                                                                                                                                        match #[lang = "branch"](::ink::codegen::deny_payment::<<AssertViolation
                                                                                                                                                                                                                as ::ink::env::ContractEnv>::Env>()) {
                                                                                                                                                                                                #[lang = "Break"] {  0: residual } =>
                                                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                                                    return #[lang = "from_residual"](residual),
                                                                                                                                                                                                #[lang = "Continue"] {  0: val } =>
                                                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                                                    val,
                                                                                                                                                                                            };
                                                                                                                                                                                    }
                                                                                                                                                                                let result:
                                                                                                                                                                                        <AssertViolation as
                                                                                                                                                                                        ::ink::reflect::DispatchableMessageInfo<786546522u32>>::Output =
                                                                                                                                                                                    <AssertViolation as
                                                                                                                                                                                            ::ink::reflect::DispatchableMessageInfo::<786546522u32>>::CALLABLE(&mut contract,
                                                                                                                                                                                        input);
                                                                                                                                                                                let is_reverted =
                                                                                                                                                                                    {
                                                                                                                                                                                                #[allow(unused_imports)]
                                                                                                                                                                                                use ::ink::result_info::IsResultTypeFallback as _;
                                                                                                                                                                                                ::ink::result_info::IsResultType<<AssertViolation as
                                                                                                                                                                                                    ::ink::reflect::DispatchableMessageInfo<786546522u32>>::Output>::VALUE
                                                                                                                                                                                            } &&
                                                                                                                                                                                        {
                                                                                                                                                                                                #[allow(unused_imports)]
                                                                                                                                                                                                use ::ink::result_info::IsResultErrFallback as _;
                                                                                                                                                                                                ::ink::result_info::IsResultErr(&result).value()
                                                                                                                                                                                            };
                                                                                                                                                                                if !is_reverted
                                                                                                                                                                                        {
                                                                                                                                                                                                push_contract(contract,
                                                                                                                                                                                                    <AssertViolation as
                                                                                                                                                                                                        ::ink::reflect::DispatchableMessageInfo::<786546522u32>>::MUTATES);
                                                                                                                                                                                            }
                                                                                                                                                                                        ::ink::env::return_value::<::ink::MessageResult<<AssertViolation
                                                                                                                                                                                                as
                                                                                                                                                                                                ::ink::reflect::DispatchableMessageInfo<786546522u32>>::Output>>(::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                                                                                                                                                                                            &::ink::MessageResult::Ok(result))
                                                                                                                                                                                    } }; } }
                                                                                                                                                                impl ::ink::reflect::ContractMessageDecoder for
                                                                                                                                                                    AssertViolation {
                                                                                                                                                                    type
                                                                                                                                                                    Type
                                                                                                                                                                    =
                                                                                                                                                                    __ink_MessageDecoder;
                                                                                                                                                                }
                                                                                                                                                            };
                                                                                                                                                    const _: () =
                                                                                                                                                        {
                                                                                                                                                                use ::ink::codegen::{};
                                                                                                                                                                use ::ink::codegen::Env as _;
                                                                                                                                                                use ::ink::codegen::StaticEnv as _;
                                                                                                                                                                const _: ::ink::codegen::utils::IsSameType<AssertViolation>
                                                                                                                                                                    =
                                                                                                                                                                    ::ink::codegen::utils::IsSameType<AssertViolation>::new();
                                                                                                                                                                impl AssertViolation {
                                                                                                                                                                    #[cfg(not(feature = "__ink_dylint_Constructor"))]
                                                                                                                                                                    fn new(init_value: u128)
                                                                                                                                                                        -> Self { Self{ value: init_value,} }
                                                                                                                                                                    fn assert_if_greater_than_10<'_>(self: &'_ Self,
                                                                                                                                                                        value: u128)
                                                                                                                                                                        ->
                                                                                                                                                                            bool {
                                                                                                                                                                            if !(value <= 10)
                                                                                                                                                                                    {
                                                                                                                                                                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["value should be less than 10"],
                                                                                                                                                                                                    &[]))
                                                                                                                                                                                        };
                                                                                                                                                                                    true
                                                                                                                                                                                }
                                                                                                                                                                            fn revert_if_greater_than_10<'_>(self: &'_ Self,
                                                                                                                                                                                value: u128)
                                                                                                                                                                                ->
                                                                                                                                                                                    Result<(),
                                                                                                                                                                                    Error> {
                                                                                                                                                                                    if value <= 10
                                                                                                                                                                                            { return Ok(()) } else { return Err(Error::GreaterThan10) }
                                                                                                                                                                                        }
                                                                                                                                                                                    type
                                                                                                                                                                                    Result<T>
                                                                                                                                                                                    =
                                                                                                                                                                                    core::result::Result<T, Error>;
                                                                                                                                                                                }
                                                                                                                                                                                const _: () =
                                                                                                                                                                                    {
                                                                                                                                                                                            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u128>>();
                                                                                                                                                                                            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u128>>();
                                                                                                                                                                                            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchOutput<bool>>();
                                                                                                                                                                                            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u128>>();
                                                                                                                                                                                            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchOutput<Result<(),
                                                                                                                                                                                                    Error>>>();
                                                                                                                                                                                        }; };
                                                                                                                                                                    const _: () =
                                                                                                                                                                        {
                                                                                                                                                                                #[doc = r" The ink! smart contract's call builder."]
                                                                                                                                                                                #[doc = r""]
                                                                                                                                                                                #[doc =
                                                                                                                                                                                r" Implements the underlying on-chain calling of the ink! smart contract"]
                                                                                                                                                                                #[doc =
                                                                                                                                                                                r" messages and trait implementations in a type safe way."]
                                                                                                                                                                                #[repr(transparent)]
                                                                                                                                                                                struct CallBuilder {
                                                                                                                                                                                    account_id: AccountId,
                                                                                                                                                                                }
                                                                                                                                                                                #[automatically_derived]
                                                                                                                                                                                impl ::core::fmt::Debug for CallBuilder {
                                                                                                                                                                                    fn fmt<'_, '_,
                                                                                                                                                                                        '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                                                                                                                                                                                        ->
                                                                                                                                                                                            ::core::fmt::Result {
                                                                                                                                                                                            ::core::fmt::Formatter::debug_struct_field1_finish(f,
                                                                                                                                                                                                "CallBuilder", "account_id", &&self.account_id)
                                                                                                                                                                                        }
                                                                                                                                                                                }
                                                                                                                                                                                #[allow(deprecated)]
                                                                                                                                                                                const _: () =
                                                                                                                                                                                    {
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::scale::Encode for CallBuilder {
                                                                                                                                                                                                fn encode_to<__CodecOutputEdqy, '_,
                                                                                                                                                                                                    '_>(self: &'_ Self,
                                                                                                                                                                                                    __codec_dest_edqy: &'_ mut __CodecOutputEdqy) where
                                                                                                                                                                                                    __CodecOutputEdqy: ::scale::Output +
                                                                                                                                                                                                    ?::core::marker::Sized {
                                                                                                                                                                                                        ::scale::Encode::encode_to(&&self.account_id,
                                                                                                                                                                                                            __codec_dest_edqy)
                                                                                                                                                                                                    }
                                                                                                                                                                                                fn encode<'_>(self: &'_ Self)
                                                                                                                                                                                                    ->
                                                                                                                                                                                                        ::scale::alloc::vec::Vec<::core::primitive::u8> {
                                                                                                                                                                                                        ::scale::Encode::encode(&&self.account_id)
                                                                                                                                                                                                    }
                                                                                                                                                                                                fn using_encoded<R, F, '_>(self: &'_ Self, f: F) -> R where
                                                                                                                                                                                                    F: for<'_> ::core::ops::FnOnce(&'_ [::core::primitive::u8])
                                                                                                                                                                                                    ->
                                                                                                                                                                                                    R { ::scale::Encode::using_encoded(&&self.account_id, f) }
                                                                                                                                                                                            }
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::scale::EncodeLike for CallBuilder { }
                                                                                                                                                                                        };
                                                                                                                                                                                #[allow(deprecated)]
                                                                                                                                                                                const _: () =
                                                                                                                                                                                    {
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::scale::Decode for CallBuilder {
                                                                                                                                                                                                fn decode<__CodecInputEdqy,
                                                                                                                                                                                                    '_>(__codec_input_edqy: &'_ mut __CodecInputEdqy)
                                                                                                                                                                                                    -> ::core::result::Result<Self, ::scale::Error> where
                                                                                                                                                                                                    __CodecInputEdqy: ::scale::Input {
                                                                                                                                                                                                        ::core::result::Result::Ok(CallBuilder{
                                                                                                                                                                                                                account_id:
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                            let __codec_res_edqy =
                                                                                                                                                                                                                                <AccountId as ::scale::Decode>::decode(__codec_input_edqy);
                                                                                                                                                                                                                            match __codec_res_edqy {
                                                                                                                                                                                                                                    ::core::result::Result::Err(e) =>
                                                                                                                                                                                                                                        return ::core::result::Result::Err(e.chain("Could not decode `CallBuilder::account_id`")),
                                                                                                                                                                                                                                    ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                                                                                                                                                                                        __codec_res_edqy,
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                        },})
                                                                                                                                                                                                    }
                                                                                                                                                                                                fn decode_into<__CodecInputEdqy, '_,
                                                                                                                                                                                                    '_>(__codec_input_edqy: &'_ mut __CodecInputEdqy,
                                                                                                                                                                                                    dst_: &'_ mut ::core::mem::MaybeUninit<Self>)
                                                                                                                                                                                                    ->
                                                                                                                                                                                                        ::core::result::Result<::scale::DecodeFinished,
                                                                                                                                                                                                        ::scale::Error> where
                                                                                                                                                                                                    __CodecInputEdqy: ::scale::Input {
                                                                                                                                                                                                        match (&::core::mem::size_of::<AccountId>(),
                                                                                                                                                                                                                        &::core::mem::size_of::<Self>()) {
                                                                                                                                                                                                                (left_val, right_val) => {
                                                                                                                                                                                                                    if !(*left_val == *right_val)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                    let kind = ::core::panicking::AssertKind::Eq;
                                                                                                                                                                                                                                    ::core::panicking::assert_failed(kind, &*left_val,
                                                                                                                                                                                                                                        &*right_val, ::core::option::Option::None);
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                        } };
                                                                                                                                                                                                                if !(if ::core::mem::size_of::<AccountId>() > 0
                                                                                                                                                                                                                                        { 1 } else { 0 }
                                                                                                                                                                                                                                        <=
                                                                                                                                                                                                                                        1)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                        ::core::panicking::panic("assertion failed: if ::core::mem::size_of::<AccountId>() > 0 { 1 } else { 0 } <= 1")
                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                    let dst_: &mut ::core::mem::MaybeUninit<Self> = dst_;
                                                                                                                                                                                                                                    let dst_: &mut ::core::mem::MaybeUninit<AccountId> =
                                                                                                                                                                                                                                        unsafe {
                                                                                                                                                                                                                                                &mut *dst_.as_mut_ptr().cast::<::core::mem::MaybeUninit<AccountId>>()
                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                    match #[lang = "branch"](<AccountId as
                                                                                                                                                                                                                                                            ::scale::Decode>::decode_into(__codec_input_edqy, dst_)) {
                                                                                                                                                                                                                                            #[lang = "Break"] {  0: residual } =>
                                                                                                                                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                                                                                                                                return #[lang = "from_residual"](residual),
                                                                                                                                                                                                                                            #[lang = "Continue"] {  0: val } =>
                                                                                                                                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                                                                                                                                val,
                                                                                                                                                                                                                                        };
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            unsafe {
                                                                                                                                                                                                                                    ::core::result::Result::Ok(::scale::DecodeFinished::assert_decoding_finished())
                                                                                                                                                                                                                                } }
                                                                                                                                                                                                                    } };
                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                        impl ::core::hash::Hash for CallBuilder {
                                                                                                                                                                                                            fn hash<__H, '_, '_>(self: &'_ Self, state: &'_ mut __H)
                                                                                                                                                                                                                -> () where
                                                                                                                                                                                                                __H: ::core::hash::Hasher {
                                                                                                                                                                                                                    ::core::hash::Hash::hash(&self.account_id, state)
                                                                                                                                                                                                                }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                        impl ::core::marker::StructuralPartialEq for CallBuilder { }
                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                        impl ::core::cmp::PartialEq for CallBuilder {
                                                                                                                                                                                                            #[inline]
                                                                                                                                                                                                            fn eq<'_, '_>(self: &'_ Self, other: &'_ CallBuilder)
                                                                                                                                                                                                                -> bool { self.account_id == other.account_id }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                        impl ::core::marker::StructuralEq for CallBuilder { }
                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                        impl ::core::cmp::Eq for CallBuilder {
                                                                                                                                                                                                            #[inline]
                                                                                                                                                                                                            #[doc(hidden)]
                                                                                                                                                                                                            #[no_coverage]
                                                                                                                                                                                                            fn assert_receiver_is_total_eq<'_>(self: &'_ Self)
                                                                                                                                                                                                                -> () { let _: ::core::cmp::AssertParamIsEq<AccountId>; }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                        impl ::core::clone::Clone for CallBuilder {
                                                                                                                                                                                                            #[inline]
                                                                                                                                                                                                            fn clone<'_>(self: &'_ Self)
                                                                                                                                                                                                                ->
                                                                                                                                                                                                                    CallBuilder {
                                                                                                                                                                                                                    CallBuilder{
                                                                                                                                                                                                                        account_id: ::core::clone::Clone::clone(&self.account_id),}
                                                                                                                                                                                                                }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        #[allow(non_upper_case_globals, unused_attributes,
                                                                                                                                                                                                        unused_qualifications)]
                                                                                                                                                                                                        const _: () =
                                                                                                                                                                                                            {
                                                                                                                                                                                                                    impl ::scale_info::TypeInfo for CallBuilder {
                                                                                                                                                                                                                        type
                                                                                                                                                                                                                        Identity
                                                                                                                                                                                                                        =
                                                                                                                                                                                                                        Self;
                                                                                                                                                                                                                        fn type_info()
                                                                                                                                                                                                                            ->
                                                                                                                                                                                                                                ::scale_info::Type {
                                                                                                                                                                                                                                ::scale_info::Type::builder().path(::scale_info::Path::new("CallBuilder",
                                                                                                                                                                                                                                                    "assert_violation::assert_violation")).type_params(::alloc::vec::Vec::new()).docs(&["The ink! smart contract\'s call builder.",
                                                                                                                                                                                                                                                    "",
                                                                                                                                                                                                                                                    "Implements the underlying on-chain calling of the ink! smart contract",
                                                                                                                                                                                                                                                    "messages and trait implementations in a type safe way."]).composite(::scale_info::build::Fields::named().field(|f|
                                                                                                                                                                                                                                            f.ty::<AccountId>().name("account_id").type_name("AccountId")))
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                };
                                                                                                                                                                                                        const _: () =
                                                                                                                                                                                                            {
                                                                                                                                                                                                                    impl ::ink::storage::traits::StorageLayout for CallBuilder {
                                                                                                                                                                                                                        fn layout<'_>(__key: &'_ ::ink::primitives::Key)
                                                                                                                                                                                                                            ->
                                                                                                                                                                                                                                ::ink::metadata::layout::Layout {
                                                                                                                                                                                                                                ::ink::metadata::layout::Layout::Struct(::ink::metadata::layout::StructLayout::new("CallBuilder",
                                                                                                                                                                                                                                        [::ink::metadata::layout::FieldLayout::new("account_id",
                                                                                                                                                                                                                                                    <AccountId as
                                                                                                                                                                                                                                                            ::ink::storage::traits::StorageLayout>::layout(__key))]))
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                };
                                                                                                                                                                                                        const _: () =
                                                                                                                                                                                                            {
                                                                                                                                                                                                                    impl ::ink::codegen::ContractCallBuilder for AssertViolation
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                        type
                                                                                                                                                                                                                        Type
                                                                                                                                                                                                                        =
                                                                                                                                                                                                                        CallBuilder;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    impl ::ink::env::ContractEnv for CallBuilder {
                                                                                                                                                                                                                        type
                                                                                                                                                                                                                        Env
                                                                                                                                                                                                                        =
                                                                                                                                                                                                                        <AssertViolation as ::ink::env::ContractEnv>::Env;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                };
                                                                                                                                                                                                        impl ::ink::env::call::FromAccountId<Environment> for
                                                                                                                                                                                                            CallBuilder {
                                                                                                                                                                                                            #[inline]
                                                                                                                                                                                                            fn from_account_id(account_id: AccountId)
                                                                                                                                                                                                                -> Self { Self{ account_id,} }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        impl ::ink::ToAccountId<Environment> for CallBuilder {
                                                                                                                                                                                                            #[inline]
                                                                                                                                                                                                            fn to_account_id<'_>(self: &'_ Self)
                                                                                                                                                                                                                ->
                                                                                                                                                                                                                    AccountId {
                                                                                                                                                                                                                    <AccountId as ::core::clone::Clone>::clone(&self.account_id)
                                                                                                                                                                                                                }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        impl ::core::convert::AsRef<AccountId> for CallBuilder {
                                                                                                                                                                                                            fn as_ref<'_>(self: &'_ Self)
                                                                                                                                                                                                                -> &'_ AccountId { &self.account_id }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        impl ::core::convert::AsMut<AccountId> for CallBuilder {
                                                                                                                                                                                                            fn as_mut<'_>(self: &'_ mut Self)
                                                                                                                                                                                                                -> &'_ mut AccountId { &mut self.account_id }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        impl CallBuilder {
                                                                                                                                                                                                            #[allow(clippy :: type_complexity)]
                                                                                                                                                                                                            #[inline]
                                                                                                                                                                                                            fn assert_if_greater_than_10<'_>(self: &'_ Self,
                                                                                                                                                                                                                __ink_binding_0: u128)
                                                                                                                                                                                                                ->
                                                                                                                                                                                                                    ::ink::env::call::CallBuilder<Environment,
                                                                                                                                                                                                                    ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                                                                                                                                                                                                                    ::ink::env::call::utils::Set<::ink::env::call::ExecutionInput<::ink::env::call::utils::ArgumentList<::ink::env::call::utils::Argument<u128>,
                                                                                                                                                                                                                    ::ink::env::call::utils::EmptyArgumentList>>>,
                                                                                                                                                                                                                    ::ink::env::call::utils::Set<::ink::env::call::utils::ReturnType<bool>>> {
                                                                                                                                                                                                                    ::ink::env::call::build_call::<Environment>().call(::ink::ToAccountId::to_account_id(self)).exec_input(::ink::env::call::ExecutionInput::new(::ink::env::call::Selector::new([222u8,
                                                                                                                                                                                                                                                207u8, 207u8,
                                                                                                                                                                                                                                                251u8])).push_arg(__ink_binding_0)).returns::<bool>()
                                                                                                                                                                                                                }
                                                                                                                                                                                                            #[allow(clippy :: type_complexity)]
                                                                                                                                                                                                            #[inline]
                                                                                                                                                                                                            fn revert_if_greater_than_10<'_>(self: &'_ Self,
                                                                                                                                                                                                                __ink_binding_0: u128)
                                                                                                                                                                                                                ->
                                                                                                                                                                                                                    ::ink::env::call::CallBuilder<Environment,
                                                                                                                                                                                                                    ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                                                                                                                                                                                                                    ::ink::env::call::utils::Set<::ink::env::call::ExecutionInput<::ink::env::call::utils::ArgumentList<::ink::env::call::utils::Argument<u128>,
                                                                                                                                                                                                                    ::ink::env::call::utils::EmptyArgumentList>>>,
                                                                                                                                                                                                                    ::ink::env::call::utils::Set<::ink::env::call::utils::ReturnType<Result<(),
                                                                                                                                                                                                                    Error>>>> {
                                                                                                                                                                                                                    ::ink::env::call::build_call::<Environment>().call(::ink::ToAccountId::to_account_id(self)).exec_input(::ink::env::call::ExecutionInput::new(::ink::env::call::Selector::new([46u8,
                                                                                                                                                                                                                                                225u8, 191u8,
                                                                                                                                                                                                                                                90u8])).push_arg(__ink_binding_0)).returns::<Result<(),
                                                                                                                                                                                                                        Error>>()
                                                                                                                                                                                                                }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    };
                                                                                                                                                                                            #[doc = " Defines the storage of your contract."]
                                                                                                                                                                                            #[doc = " Add new fields to the below struct in order"]
                                                                                                                                                                                            #[doc =
                                                                                                                                                                                            " to add new static storage fields to your contract."]
                                                                                                                                                                                            struct AssertViolationRef {
                                                                                                                                                                                                inner: <AssertViolation as
                                                                                                                                                                                                ::ink::codegen::ContractCallBuilder>::Type,
                                                                                                                                                                                            }
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::core::fmt::Debug for AssertViolationRef {
                                                                                                                                                                                                fn fmt<'_, '_,
                                                                                                                                                                                                    '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                                                                                                                                                                                                    ->
                                                                                                                                                                                                        ::core::fmt::Result {
                                                                                                                                                                                                        ::core::fmt::Formatter::debug_struct_field1_finish(f,
                                                                                                                                                                                                            "AssertViolationRef", "inner", &&self.inner)
                                                                                                                                                                                                    }
                                                                                                                                                                                            }
                                                                                                                                                                                            #[allow(deprecated)]
                                                                                                                                                                                            const _: () =
                                                                                                                                                                                                {
                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                        impl ::scale::Encode for AssertViolationRef {
                                                                                                                                                                                                            fn encode_to<__CodecOutputEdqy, '_,
                                                                                                                                                                                                                '_>(self: &'_ Self,
                                                                                                                                                                                                                __codec_dest_edqy: &'_ mut __CodecOutputEdqy) where
                                                                                                                                                                                                                __CodecOutputEdqy: ::scale::Output +
                                                                                                                                                                                                                ?::core::marker::Sized {
                                                                                                                                                                                                                    ::scale::Encode::encode_to(&&self.inner, __codec_dest_edqy)
                                                                                                                                                                                                                }
                                                                                                                                                                                                            fn encode<'_>(self: &'_ Self)
                                                                                                                                                                                                                ->
                                                                                                                                                                                                                    ::scale::alloc::vec::Vec<::core::primitive::u8> {
                                                                                                                                                                                                                    ::scale::Encode::encode(&&self.inner)
                                                                                                                                                                                                                }
                                                                                                                                                                                                            fn using_encoded<R, F, '_>(self: &'_ Self, f: F) -> R where
                                                                                                                                                                                                                F: for<'_> ::core::ops::FnOnce(&'_ [::core::primitive::u8])
                                                                                                                                                                                                                -> R { ::scale::Encode::using_encoded(&&self.inner, f) }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                        impl ::scale::EncodeLike for AssertViolationRef { }
                                                                                                                                                                                                    };
                                                                                                                                                                                            #[allow(deprecated)]
                                                                                                                                                                                            const _: () =
                                                                                                                                                                                                {
                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                        impl ::scale::Decode for AssertViolationRef {
                                                                                                                                                                                                            fn decode<__CodecInputEdqy,
                                                                                                                                                                                                                '_>(__codec_input_edqy: &'_ mut __CodecInputEdqy)
                                                                                                                                                                                                                -> ::core::result::Result<Self, ::scale::Error> where
                                                                                                                                                                                                                __CodecInputEdqy: ::scale::Input {
                                                                                                                                                                                                                    ::core::result::Result::Ok(AssertViolationRef{
                                                                                                                                                                                                                            inner:
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                        let __codec_res_edqy =
                                                                                                                                                                                                                                            <<AssertViolation as
                                                                                                                                                                                                                                                    ::ink::codegen::ContractCallBuilder>::Type as
                                                                                                                                                                                                                                                    ::scale::Decode>::decode(__codec_input_edqy);
                                                                                                                                                                                                                                        match __codec_res_edqy {
                                                                                                                                                                                                                                                ::core::result::Result::Err(e) =>
                                                                                                                                                                                                                                                    return ::core::result::Result::Err(e.chain("Could not decode `AssertViolationRef::inner`")),
                                                                                                                                                                                                                                                ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                                                                                                                                                                                                    __codec_res_edqy,
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                    },})
                                                                                                                                                                                                                }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    };
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::core::hash::Hash for AssertViolationRef {
                                                                                                                                                                                                fn hash<__H, '_, '_>(self: &'_ Self, state: &'_ mut __H)
                                                                                                                                                                                                    -> () where
                                                                                                                                                                                                    __H: ::core::hash::Hasher {
                                                                                                                                                                                                        ::core::hash::Hash::hash(&self.inner, state)
                                                                                                                                                                                                    }
                                                                                                                                                                                            }
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::core::marker::StructuralPartialEq for
                                                                                                                                                                                                AssertViolationRef {
                                                                                                                                                                                            }
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::core::cmp::PartialEq for AssertViolationRef {
                                                                                                                                                                                                #[inline]
                                                                                                                                                                                                fn eq<'_, '_>(self: &'_ Self, other: &'_ AssertViolationRef)
                                                                                                                                                                                                    -> bool { self.inner == other.inner }
                                                                                                                                                                                            }
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::core::marker::StructuralEq for AssertViolationRef { }
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::core::cmp::Eq for AssertViolationRef {
                                                                                                                                                                                                #[inline]
                                                                                                                                                                                                #[doc(hidden)]
                                                                                                                                                                                                #[no_coverage]
                                                                                                                                                                                                fn assert_receiver_is_total_eq<'_>(self: &'_ Self)
                                                                                                                                                                                                    ->
                                                                                                                                                                                                        () {
                                                                                                                                                                                                        let _:
                                                                                                                                                                                                                ::core::cmp::AssertParamIsEq<<AssertViolation as
                                                                                                                                                                                                                ::ink::codegen::ContractCallBuilder>::Type>;
                                                                                                                                                                                                    }
                                                                                                                                                                                            }
                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                            impl ::core::clone::Clone for AssertViolationRef {
                                                                                                                                                                                                #[inline]
                                                                                                                                                                                                fn clone<'_>(self: &'_ Self)
                                                                                                                                                                                                    ->
                                                                                                                                                                                                        AssertViolationRef {
                                                                                                                                                                                                        AssertViolationRef{
                                                                                                                                                                                                            inner: ::core::clone::Clone::clone(&self.inner),}
                                                                                                                                                                                                    }
                                                                                                                                                                                            }
                                                                                                                                                                                            #[allow(non_upper_case_globals, unused_attributes,
                                                                                                                                                                                            unused_qualifications)]
                                                                                                                                                                                            const _: () =
                                                                                                                                                                                                {
                                                                                                                                                                                                        impl ::scale_info::TypeInfo for AssertViolationRef {
                                                                                                                                                                                                            type
                                                                                                                                                                                                            Identity
                                                                                                                                                                                                            =
                                                                                                                                                                                                            Self;
                                                                                                                                                                                                            fn type_info()
                                                                                                                                                                                                                ->
                                                                                                                                                                                                                    ::scale_info::Type {
                                                                                                                                                                                                                    ::scale_info::Type::builder().path(::scale_info::Path::new("AssertViolationRef",
                                                                                                                                                                                                                                        "assert_violation::assert_violation")).type_params(::alloc::vec::Vec::new()).docs(&["Defines the storage of your contract.",
                                                                                                                                                                                                                                        "Add new fields to the below struct in order",
                                                                                                                                                                                                                                        "to add new static storage fields to your contract."]).composite(::scale_info::build::Fields::named().field(|f|
                                                                                                                                                                                                                                f.ty::<<AssertViolation as
                                                                                                                                                                                                                                            ::ink::codegen::ContractCallBuilder>::Type>().name("inner").type_name("<AssertViolation as::ink::codegen::ContractCallBuilder>::Type")))
                                                                                                                                                                                                                }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    };
                                                                                                                                                                                            const _: () =
                                                                                                                                                                                                {
                                                                                                                                                                                                        impl ::ink::storage::traits::StorageLayout for
                                                                                                                                                                                                            AssertViolationRef {
                                                                                                                                                                                                            fn layout<'_>(__key: &'_ ::ink::primitives::Key)
                                                                                                                                                                                                                ->
                                                                                                                                                                                                                    ::ink::metadata::layout::Layout {
                                                                                                                                                                                                                    ::ink::metadata::layout::Layout::Struct(::ink::metadata::layout::StructLayout::new("AssertViolationRef",
                                                                                                                                                                                                                            [::ink::metadata::layout::FieldLayout::new("inner",
                                                                                                                                                                                                                                        <<AssertViolation as
                                                                                                                                                                                                                                                ::ink::codegen::ContractCallBuilder>::Type as
                                                                                                                                                                                                                                                ::ink::storage::traits::StorageLayout>::layout(__key))]))
                                                                                                                                                                                                                }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    };
                                                                                                                                                                                            const _: () =
                                                                                                                                                                                                {
                                                                                                                                                                                                        impl ::ink::env::ContractReference for AssertViolation {
                                                                                                                                                                                                            type
                                                                                                                                                                                                            Type
                                                                                                                                                                                                            =
                                                                                                                                                                                                            AssertViolationRef;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        impl ::ink::env::call::ConstructorReturnType<AssertViolationRef>
                                                                                                                                                                                                            for AssertViolation {
                                                                                                                                                                                                            type
                                                                                                                                                                                                            Output
                                                                                                                                                                                                            =
                                                                                                                                                                                                            AssertViolationRef;
                                                                                                                                                                                                            type
                                                                                                                                                                                                            Error
                                                                                                                                                                                                            =
                                                                                                                                                                                                            ();
                                                                                                                                                                                                            fn ok(value: AssertViolationRef) -> Self::Output { value }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        impl <E>
                                                                                                                                                                                                            ::ink::env::call::ConstructorReturnType<AssertViolationRef>
                                                                                                                                                                                                            for ::core::result::Result<AssertViolation, E> where
                                                                                                                                                                                                            E: ::scale::Decode {
                                                                                                                                                                                                            const IS_RESULT: bool = true;
                                                                                                                                                                                                                type Output = ::core::result::Result<AssertViolationRef, E>;
                                                                                                                                                                                                                type Error = E;
                                                                                                                                                                                                                fn ok(value: AssertViolationRef)
                                                                                                                                                                                                                    -> Self::Output { ::core::result::Result::Ok(value) }
                                                                                                                                                                                                                fn err(err: Self::Error)
                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                        ::core::option::Option<Self::Output> {
                                                                                                                                                                                                                        ::core::option::Option::Some(::core::result::Result::Err(err))
                                                                                                                                                                                                                    } }
                                                                                                                                                                                                                impl ::ink::env::ContractEnv for AssertViolationRef {
                                                                                                                                                                                                                    type
                                                                                                                                                                                                                    Env
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    <AssertViolation as ::ink::env::ContractEnv>::Env;
                                                                                                                                                                                                                }
                                                                                                                                                                                                            };
                                                                                                                                                                                                    impl AssertViolationRef {
                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                        #[allow(clippy :: type_complexity)]
                                                                                                                                                                                                        fn new(__ink_binding_0: u128)
                                                                                                                                                                                                            ->
                                                                                                                                                                                                                ::ink::env::call::CreateBuilder<Environment, Self,
                                                                                                                                                                                                                ::ink::env::call::utils::Unset<Hash>,
                                                                                                                                                                                                                ::ink::env::call::utils::Unset<u64>,
                                                                                                                                                                                                                ::ink::env::call::utils::Unset<Balance>,
                                                                                                                                                                                                                ::ink::env::call::utils::Set<::ink::env::call::ExecutionInput<::ink::env::call::utils::ArgumentList<::ink::env::call::utils::Argument<u128>,
                                                                                                                                                                                                                ::ink::env::call::utils::EmptyArgumentList>>>,
                                                                                                                                                                                                                ::ink::env::call::utils::Unset<::ink::env::call::state::Salt>,
                                                                                                                                                                                                                ::ink::env::call::utils::Set<::ink::env::call::utils::ReturnType<Self>>> {
                                                                                                                                                                                                                ::ink::env::call::build_create::<Self>().exec_input(::ink::env::call::ExecutionInput::new(::ink::env::call::Selector::new([155u8,
                                                                                                                                                                                                                                            174u8, 157u8,
                                                                                                                                                                                                                                            94u8])).push_arg(__ink_binding_0)).returns::<Self>()
                                                                                                                                                                                                            }
                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                        fn assert_if_greater_than_10<'_>(self: &'_ Self,
                                                                                                                                                                                                            value: u128)
                                                                                                                                                                                                            ->
                                                                                                                                                                                                                bool {
                                                                                                                                                                                                                self.try_assert_if_greater_than_10(value).unwrap_or_else(|error|
                                                                                                                                                                                                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["encountered error while calling ",
                                                                                                                                                                                                                                            "::", ": "],
                                                                                                                                                                                                                                &match (&"AssertViolation", &"assert_if_greater_than_10",
                                                                                                                                                                                                                                                    &error) {
                                                                                                                                                                                                                                            args =>
                                                                                                                                                                                                                                                [::core::fmt::ArgumentV1::new_display(args.0),
                                                                                                                                                                                                                                                        ::core::fmt::ArgumentV1::new_display(args.1),
                                                                                                                                                                                                                                                        ::core::fmt::ArgumentV1::new_debug(args.2)],
                                                                                                                                                                                                                                        })))
                                                                                                                                                                                                            }
                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                        fn try_assert_if_greater_than_10<'_>(self: &'_ Self,
                                                                                                                                                                                                            value: u128)
                                                                                                                                                                                                            ->
                                                                                                                                                                                                                ::ink::MessageResult<bool> {
                                                                                                                                                                                                                <Self as
                                                                                                                                                                                                                                    ::ink::codegen::TraitCallBuilder>::call(self).assert_if_greater_than_10(value).try_invoke().unwrap_or_else(|error|
                                                                                                                                                                                                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["encountered error while calling ",
                                                                                                                                                                                                                                            "::", ": "],
                                                                                                                                                                                                                                &match (&"AssertViolation", &"assert_if_greater_than_10",
                                                                                                                                                                                                                                                    &error) {
                                                                                                                                                                                                                                            args =>
                                                                                                                                                                                                                                                [::core::fmt::ArgumentV1::new_display(args.0),
                                                                                                                                                                                                                                                        ::core::fmt::ArgumentV1::new_display(args.1),
                                                                                                                                                                                                                                                        ::core::fmt::ArgumentV1::new_debug(args.2)],
                                                                                                                                                                                                                                        })))
                                                                                                                                                                                                            }
                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                        fn revert_if_greater_than_10<'_>(self: &'_ Self,
                                                                                                                                                                                                            value: u128)
                                                                                                                                                                                                            ->
                                                                                                                                                                                                                Result<(),
                                                                                                                                                                                                                Error> {
                                                                                                                                                                                                                self.try_revert_if_greater_than_10(value).unwrap_or_else(|error|
                                                                                                                                                                                                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["encountered error while calling ",
                                                                                                                                                                                                                                            "::", ": "],
                                                                                                                                                                                                                                &match (&"AssertViolation", &"revert_if_greater_than_10",
                                                                                                                                                                                                                                                    &error) {
                                                                                                                                                                                                                                            args =>
                                                                                                                                                                                                                                                [::core::fmt::ArgumentV1::new_display(args.0),
                                                                                                                                                                                                                                                        ::core::fmt::ArgumentV1::new_display(args.1),
                                                                                                                                                                                                                                                        ::core::fmt::ArgumentV1::new_debug(args.2)],
                                                                                                                                                                                                                                        })))
                                                                                                                                                                                                            }
                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                        fn try_revert_if_greater_than_10<'_>(self: &'_ Self,
                                                                                                                                                                                                            value: u128)
                                                                                                                                                                                                            ->
                                                                                                                                                                                                                ::ink::MessageResult<Result<(),
                                                                                                                                                                                                                Error>> {
                                                                                                                                                                                                                <Self as
                                                                                                                                                                                                                                    ::ink::codegen::TraitCallBuilder>::call(self).revert_if_greater_than_10(value).try_invoke().unwrap_or_else(|error|
                                                                                                                                                                                                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["encountered error while calling ",
                                                                                                                                                                                                                                            "::", ": "],
                                                                                                                                                                                                                                &match (&"AssertViolation", &"revert_if_greater_than_10",
                                                                                                                                                                                                                                                    &error) {
                                                                                                                                                                                                                                            args =>
                                                                                                                                                                                                                                                [::core::fmt::ArgumentV1::new_display(args.0),
                                                                                                                                                                                                                                                        ::core::fmt::ArgumentV1::new_display(args.1),
                                                                                                                                                                                                                                                        ::core::fmt::ArgumentV1::new_debug(args.2)],
                                                                                                                                                                                                                                        })))
                                                                                                                                                                                                            }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    const _: () =
                                                                                                                                                                                                        {
                                                                                                                                                                                                                impl ::ink::codegen::TraitCallBuilder for AssertViolationRef
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                    type
                                                                                                                                                                                                                    Builder
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    <AssertViolation as
                                                                                                                                                                                                                    ::ink::codegen::ContractCallBuilder>::Type;
                                                                                                                                                                                                                    #[inline]
                                                                                                                                                                                                                    fn call<'_>(self: &'_ Self)
                                                                                                                                                                                                                        -> &'_ Self::Builder { &self.inner }
                                                                                                                                                                                                                    #[inline]
                                                                                                                                                                                                                    fn call_mut<'_>(self: &'_ mut Self)
                                                                                                                                                                                                                        -> &'_ mut Self::Builder { &mut self.inner }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            };
                                                                                                                                                                                                    impl ::ink::env::call::FromAccountId<Environment> for
                                                                                                                                                                                                        AssertViolationRef {
                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                        fn from_account_id(account_id: AccountId)
                                                                                                                                                                                                            ->
                                                                                                                                                                                                                Self {
                                                                                                                                                                                                                Self{
                                                                                                                                                                                                                    inner:
                                                                                                                                                                                                                        <<AssertViolation as
                                                                                                                                                                                                                                ::ink::codegen::ContractCallBuilder>::Type as
                                                                                                                                                                                                                                ::ink::env::call::FromAccountId::<Environment>>::from_account_id(account_id),}
                                                                                                                                                                                                            }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    impl ::ink::ToAccountId<Environment> for AssertViolationRef
                                                                                                                                                                                                        {
                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                        fn to_account_id<'_>(self: &'_ Self)
                                                                                                                                                                                                            ->
                                                                                                                                                                                                                AccountId {
                                                                                                                                                                                                                <<AssertViolation as
                                                                                                                                                                                                                        ::ink::codegen::ContractCallBuilder>::Type as
                                                                                                                                                                                                                        ::ink::ToAccountId::<Environment>>::to_account_id(&self.inner)
                                                                                                                                                                                                            }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    impl ::core::convert::AsRef<AccountId> for
                                                                                                                                                                                                        AssertViolationRef {
                                                                                                                                                                                                        fn as_ref<'_>(self: &'_ Self)
                                                                                                                                                                                                            ->
                                                                                                                                                                                                                &'_ AccountId {
                                                                                                                                                                                                                <_ as
                                                                                                                                                                                                                        ::core::convert::AsRef::<AccountId>>::as_ref(&self.inner)
                                                                                                                                                                                                            }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    impl ::core::convert::AsMut<AccountId> for
                                                                                                                                                                                                        AssertViolationRef {
                                                                                                                                                                                                        fn as_mut<'_>(self: &'_ mut Self)
                                                                                                                                                                                                            ->
                                                                                                                                                                                                                &'_ mut AccountId {
                                                                                                                                                                                                                <_ as
                                                                                                                                                                                                                        ::core::convert::AsMut::<AccountId>>::as_mut(&mut self.inner)
                                                                                                                                                                                                            }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    #[cfg(feature = "std")]
                                                                                                                                                                                                    #[cfg(not(feature = "ink-as-dependency"))]
                                                                                                                                                                                                    const _: () =
                                                                                                                                                                                                        {
                                                                                                                                                                                                                #[no_mangle]
                                                                                                                                                                                                                fn __ink_generate_metadata()
                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                        ::ink::metadata::InkProject {
                                                                                                                                                                                                                        let layout =
                                                                                                                                                                                                                            ::ink::metadata::layout::Layout::Root(::ink::metadata::layout::RootLayout::new(<::ink::metadata::layout::LayoutKey
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            ::core::convert::From::<::ink::primitives::Key>>::from(<AssertViolation
                                                                                                                                                                                                                                            as ::ink::storage::traits::StorageKey>::KEY),
                                                                                                                                                                                                                                    <AssertViolation as
                                                                                                                                                                                                                                            ::ink::storage::traits::StorageLayout>::layout(&<AssertViolation
                                                                                                                                                                                                                                                as ::ink::storage::traits::StorageKey>::KEY)));
                                                                                                                                                                                                                        ::ink::metadata::layout::ValidateLayout::validate(&layout).unwrap_or_else(|error|
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["metadata ink! generation failed: "],
                                                                                                                                                                                                                                                &[::core::fmt::ArgumentV1::new_display(&error)]))
                                                                                                                                                                                                                                    });
                                                                                                                                                                                                                        ::ink::metadata::InkProject::new(layout,
                                                                                                                                                                                                                            ::ink::metadata::ContractSpec::new().constructors([::ink::metadata::ConstructorSpec::from_label("new").selector([155u8,
                                                                                                                                                                                                                                                                                                    174u8, 157u8,
                                                                                                                                                                                                                                                                                                    94u8]).args([::ink::metadata::MessageParamSpec::new("init_value").of_type(::ink::metadata::TypeSpec::with_name_segs::<u128,
                                                                                                                                                                                                                                                                                                                _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["u128"]),
                                                                                                                                                                                                                                                                                                                ::core::convert::AsRef::as_ref))).done()]).payable(false).default(false).returns(::ink::metadata::ReturnTypeSpec::new(if <AssertViolation
                                                                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                                                                            ::ink::reflect::DispatchableConstructorInfo::<2611912030u32>>::IS_RESULT
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                ::core::option::Option::Some(::ink::metadata::TypeSpec::with_name_str::<::ink::ConstructorResult<::core::result::Result<(),
                                                                                                                                                                                                                                                                                                            <AssertViolation as
                                                                                                                                                                                                                                                                                                            ::ink::reflect::DispatchableConstructorInfo<2611912030u32>>::Error>>>("ink_primitives::ConstructorResult"))
                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                           ::core::option::Option::Some(::ink::metadata::TypeSpec::with_name_str::<::ink::ConstructorResult<()>>("ink_primitives::ConstructorResult"))
                                                                                                                                                                                                                                                                                       })).docs([]).done()]).messages([::ink::metadata::MessageSpec::from_label("assert_if_greater_than_10").selector([222u8,
                                                                                                                                                                                                                                                                                                        207u8, 207u8,
                                                                                                                                                                                                                                                                                                        251u8]).args([::ink::metadata::MessageParamSpec::new("value").of_type(::ink::metadata::TypeSpec::with_name_segs::<u128,
                                                                                                                                                                                                                                                                                                                    _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["u128"]),
                                                                                                                                                                                                                                                                                                                    ::core::convert::AsRef::as_ref))).done()]).returns(::ink::metadata::ReturnTypeSpec::new(::ink::metadata::TypeSpec::with_name_segs::<::ink::MessageResult<bool>,
                                                                                                                                                                                                                                                                                                    _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["ink",
                                                                                                                                                                                                                                                                                                                "MessageResult"]),
                                                                                                                                                                                                                                                                                                    ::core::convert::AsRef::as_ref)))).mutates(false).payable(false).default(false).docs([]).done(),
                                                                                                                                                                                                                                                                ::ink::metadata::MessageSpec::from_label("revert_if_greater_than_10").selector([46u8,
                                                                                                                                                                                                                                                                                                        225u8, 191u8,
                                                                                                                                                                                                                                                                                                        90u8]).args([::ink::metadata::MessageParamSpec::new("value").of_type(::ink::metadata::TypeSpec::with_name_segs::<u128,
                                                                                                                                                                                                                                                                                                                    _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["u128"]),
                                                                                                                                                                                                                                                                                                                    ::core::convert::AsRef::as_ref))).done()]).returns(::ink::metadata::ReturnTypeSpec::new(::ink::metadata::TypeSpec::with_name_segs::<::ink::MessageResult<Result<(),
                                                                                                                                                                                                                                                                                                    Error>>,
                                                                                                                                                                                                                                                                                                    _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["ink",
                                                                                                                                                                                                                                                                                                                "MessageResult"]),
                                                                                                                                                                                                                                                                                                    ::core::convert::AsRef::as_ref)))).mutates(false).payable(false).default(false).docs([]).done()]).events([]).docs([]).lang_error(::ink::metadata::TypeSpec::with_name_segs::<::ink::LangError,
                                                                                                                                                                                                                                                        _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["ink",
                                                                                                                                                                                                                                                                    "LangError"]),
                                                                                                                                                                                                                                                        ::core::convert::AsRef::as_ref))).environment(::ink::metadata::EnvironmentSpec::new().account_id(::ink::metadata::TypeSpec::with_name_segs::<AccountId,
                                                                                                                                                                                                                                                                                    _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                                                                                                                                                                                                                                                    ::core::convert::AsRef::as_ref))).balance(::ink::metadata::TypeSpec::with_name_segs::<Balance,
                                                                                                                                                                                                                                                                                _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["Balance"]),
                                                                                                                                                                                                                                                                                ::core::convert::AsRef::as_ref))).hash(::ink::metadata::TypeSpec::with_name_segs::<Hash,
                                                                                                                                                                                                                                                                            _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["Hash"]),
                                                                                                                                                                                                                                                                            ::core::convert::AsRef::as_ref))).timestamp(::ink::metadata::TypeSpec::with_name_segs::<Timestamp,
                                                                                                                                                                                                                                                                        _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["Timestamp"]),
                                                                                                                                                                                                                                                                        ::core::convert::AsRef::as_ref))).block_number(::ink::metadata::TypeSpec::with_name_segs::<BlockNumber,
                                                                                                                                                                                                                                                                    _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["BlockNumber"]),
                                                                                                                                                                                                                                                                    ::core::convert::AsRef::as_ref))).chain_extension(::ink::metadata::TypeSpec::with_name_segs::<ChainExtension,
                                                                                                                                                                                                                                                                _>(::core::iter::Iterator::map(::core::iter::IntoIterator::into_iter(["ChainExtension"]),
                                                                                                                                                                                                                                                                ::core::convert::AsRef::as_ref))).max_event_topics(MAX_EVENT_TOPICS).done()).done())
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    };
                                                                                                                                                                                                            enum Error {

                                                                                                                                                                                                                #[doc = " Provide a detailed comment on the error"]
                                                                                                                                                                                                                GreaterThan10,
                                                                                                                                                                                                            }
                                                                                                                                                                                                            #[allow(non_upper_case_globals, unused_attributes,
                                                                                                                                                                                                            unused_qualifications)]
                                                                                                                                                                                                            const _: () =
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        impl ::scale_info::TypeInfo for Error {
                                                                                                                                                                                                                            type
                                                                                                                                                                                                                            Identity
                                                                                                                                                                                                                            =
                                                                                                                                                                                                                            Self;
                                                                                                                                                                                                                            fn type_info()
                                                                                                                                                                                                                                ->
                                                                                                                                                                                                                                    ::scale_info::Type {
                                                                                                                                                                                                                                    ::scale_info::Type::builder().path(::scale_info::Path::new("Error",
                                                                                                                                                                                                                                                    "assert_violation::assert_violation")).type_params(::alloc::vec::Vec::new()).variant(::scale_info::build::Variants::new().variant("GreaterThan10",
                                                                                                                                                                                                                                            |v|
                                                                                                                                                                                                                                                v.index(0usize as
                                                                                                                                                                                                                                                            ::core::primitive::u8).docs(&["Provide a detailed comment on the error"])))
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    };
                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                            impl ::core::fmt::Debug for Error {
                                                                                                                                                                                                                fn fmt<'_, '_,
                                                                                                                                                                                                                    '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                        ::core::fmt::Result {
                                                                                                                                                                                                                        ::core::fmt::Formatter::write_str(f, "GreaterThan10")
                                                                                                                                                                                                                    }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                            impl ::core::marker::StructuralPartialEq for Error { }
                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                            impl ::core::cmp::PartialEq for Error {
                                                                                                                                                                                                                #[inline]
                                                                                                                                                                                                                fn eq<'_, '_>(self: &'_ Self, other: &'_ Error)
                                                                                                                                                                                                                    -> bool { true }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                            impl ::core::marker::StructuralEq for Error { }
                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                            impl ::core::cmp::Eq for Error {
                                                                                                                                                                                                                #[inline]
                                                                                                                                                                                                                #[doc(hidden)]
                                                                                                                                                                                                                #[no_coverage]
                                                                                                                                                                                                                fn assert_receiver_is_total_eq<'_>(self: &'_ Self) -> () { }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            #[allow(deprecated)]
                                                                                                                                                                                                            const _: () =
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                                        impl ::scale::Encode for Error {
                                                                                                                                                                                                                            fn encode_to<__CodecOutputEdqy, '_,
                                                                                                                                                                                                                                '_>(self: &'_ Self,
                                                                                                                                                                                                                                __codec_dest_edqy: &'_ mut __CodecOutputEdqy) where
                                                                                                                                                                                                                                __CodecOutputEdqy: ::scale::Output +
                                                                                                                                                                                                                                ?::core::marker::Sized {
                                                                                                                                                                                                                                    match *self {
                                                                                                                                                                                                                                            Error::GreaterThan10 => {

                                                                                                                                                                                                                                                #[allow(clippy :: unnecessary_cast)]
                                                                                                                                                                                                                                                __codec_dest_edqy.push_byte(0usize as
                                                                                                                                                                                                                                                        ::core::primitive::u8);
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            _ => (),
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                                        impl ::scale::EncodeLike for Error { }
                                                                                                                                                                                                                    };
                                                                                                                                                                                                            #[allow(deprecated)]
                                                                                                                                                                                                            const _: () =
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        #[automatically_derived]
                                                                                                                                                                                                                        impl ::scale::Decode for Error {
                                                                                                                                                                                                                            fn decode<__CodecInputEdqy,
                                                                                                                                                                                                                                '_>(__codec_input_edqy: &'_ mut __CodecInputEdqy)
                                                                                                                                                                                                                                -> ::core::result::Result<Self, ::scale::Error> where
                                                                                                                                                                                                                                __CodecInputEdqy: ::scale::Input {
                                                                                                                                                                                                                                    match match #[lang = "branch"](__codec_input_edqy.read_byte().map_err(|e|
                                                                                                                                                                                                                                                                        e.chain("Could not decode `Error`, failed to read variant byte")))
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                        #[lang = "Break"] {  0: residual } =>
                                                                                                                                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                                                                                                                                            return #[lang = "from_residual"](residual),
                                                                                                                                                                                                                                                        #[lang = "Continue"] {  0: val } =>
                                                                                                                                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                                                                                                                                            val,
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                #[allow(clippy :: unnecessary_cast)]
                                                                                                                                                                                                                                                __codec_x_edqy if
                                                                                                                                                                                                                                                __codec_x_edqy == 0usize as ::core::primitive::u8 => {

                                                                                                                                                                                                                                                #[allow(clippy :: redundant_closure_call)]
                                                                                                                                                                                                                                                return (move ||
                                                                                                                                                                                                                                                            { ::core::result::Result::Ok(Error::GreaterThan10) })();
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            _ => {

                                                                                                                                                                                                                                                #[allow(clippy :: redundant_closure_call)]
                                                                                                                                                                                                                                                return (move ||
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                    ::core::result::Result::Err(<_ as
                                                                                                                                                                                                                                                                                ::core::convert::Into::<_>>::into("Could not decode `Error`, variant doesn\'t exist"))
                                                                                                                                                                                                                                                                })();
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }; }
