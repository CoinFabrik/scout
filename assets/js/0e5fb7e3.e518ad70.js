"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[3687],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8561:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(2564),r=(n(9496),n(9613));const i={},l="Lazy storage on delegate",o={unversionedId:"vulnerabilities/lazy-delegate",id:"vulnerabilities/lazy-delegate",title:"Lazy storage on delegate",description:"Description",source:"@site/docs/vulnerabilities/23-lazy-delegate.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/lazy-delegate",permalink:"/scout/docs/vulnerabilities/lazy-delegate",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/23-lazy-delegate.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Unprotected mapping operation",permalink:"/scout/docs/vulnerabilities/unprotected-mapping-operation"},next:{title:"Detectors",permalink:"/scout/docs/detectors/"}},s={},c=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lazy-storage-on-delegate"},"Lazy storage on delegate"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,r.kt)("inlineCode",{parentName:"li"},"High")),(0,r.kt)("li",{parentName:"ul"},"Detectors: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/lazy-delegate"},(0,r.kt)("inlineCode",{parentName:"a"},"lazy-delegate"))),(0,r.kt)("li",{parentName:"ul"},"Test Cases: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/lazy-delegate/"},(0,r.kt)("inlineCode",{parentName:"a"},"lazy-delegate")))),(0,r.kt)("p",null,"ink! has a bug that makes delegated calls not modify the storage of the caller, unless it's using ",(0,r.kt)("inlineCode",{parentName:"p"},"Lazy")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"ManualKey")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapping"),"."),(0,r.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,r.kt)("p",null,"Consider the following ",(0,r.kt)("inlineCode",{parentName:"p"},"ink!")," contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'\n// With this storage\n    #[ink(storage)]\n    pub struct DelegateCall {\n        admin: AccountId,\n    }\n\n\n    #[ink(message)]\n    pub fn change_admin(\n        &mut self,\n        target: Hash,\n        new_admin: AccountId,\n    ) -> Result<AccountId, Error> {\n        if self.admin != self.env().caller() {\n            return Err(Error::NotAnAdmin);\n        }\n\n        let res = build_call::<DefaultEnvironment>()\n            .delegate(target)\n            .exec_input(\n                ExecutionInput::new(Selector::new(ink::selector_bytes!("change_admin")))\n                    .push_arg(new_admin),\n            )\n            .returns::<AccountId>()\n            .try_invoke()\n            .map_err(|_| Error::DelegateCallFailed)?\n            .map_err(|_| Error::DelegateCallFailed)?;\n\n        Ok(res)\n}\n')),(0,r.kt)("p",null,"In this example, the function ",(0,r.kt)("inlineCode",{parentName:"p"},"change_admin")," takes ",(0,r.kt)("inlineCode",{parentName:"p"},"new_admin")," and sets it as the new admin. If this function is called, ",(0,r.kt)("inlineCode",{parentName:"p"},"self.admin")," will be the same as before, even if it's setted to a new ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountId"),"."),(0,r.kt)("p",null,"The vulnerable code example can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/lazy-delegate/lazy-delegate-1/vulnerable-example"},(0,r.kt)("inlineCode",{parentName:"a"},"here")),"."),(0,r.kt)("h2",{id:"remediation"},"Remediation"),(0,r.kt)("p",null,"To remediate this, we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Lazy")," to store things."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    #[ink(storage)]\n    #[derive(Default)]\n    pub struct DelegateCall {\n        admin: Lazy<AccountId, ManualKey<123456>>,\n    }\n\n    #[ink(message, payable)]\n    pub fn change_admin(\n        &mut self,\n        target: Hash,\n        new_admin: AccountId,\n    ) -> Result<AccountId, Error> {\n        if self.admin.get().unwrap() != self.env().caller() {\n            return Err(Error::NotAnAdmin);\n        }\n\n        let res = build_call::<DefaultEnvironment>()\n            .delegate(target)\n            .exec_input(\n                ExecutionInput::new(Selector::new(ink::selector_bytes!("change_admin")))\n                    .push_arg(new_admin),\n            )\n            .returns::<AccountId>()\n            .try_invoke()\n            .map_err(|_| Error::DelegateCallFailed)?\n            .map_err(|_| Error::DelegateCallFailed)?;\n\n        Ok(res)\n    }\n')),(0,r.kt)("p",null,"The remediated code example can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/lazy-delegate/lazy-delegate-1/remediated-example"},(0,r.kt)("inlineCode",{parentName:"a"},"here")),"."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/paritytech/ink/issues/1825"},"https://github.com/paritytech/ink/issues/1825")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/paritytech/ink/issues/1826"},"https://github.com/paritytech/ink/issues/1826"))))}d.isMDXComponent=!0}}]);