"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[366],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=i,m=u["".concat(o,".").concat(f)]||u[f]||d[f]||a;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=f;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:i,s[1]=l;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(2564),i=(n(9496),n(9613));const a={},s="Buffering Unsized Types",l={unversionedId:"vulnerabilities/buffering-unsized-types",id:"vulnerabilities/buffering-unsized-types",title:"Buffering Unsized Types",description:"Description",source:"@site/docs/vulnerabilities/25-buffering-unsized-types.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/buffering-unsized-types",permalink:"/scout/docs/vulnerabilities/buffering-unsized-types",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/25-buffering-unsized-types.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Incorrect Exponentiation",permalink:"/scout/docs/vulnerabilities/incorrect-exponentiation"},next:{title:"Avoid Unsafe Block",permalink:"/scout/docs/vulnerabilities/avoid-unsafe-block"}},o={},p=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"buffering-unsized-types"},"Buffering Unsized Types"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,i.kt)("inlineCode",{parentName:"li"},"Best practices")),(0,i.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,i.kt)("inlineCode",{parentName:"li"},"Enhancement")),(0,i.kt)("li",{parentName:"ul"},"Detectors: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/buffering-unsized-types"},(0,i.kt)("inlineCode",{parentName:"a"},"vec-considerations"))),(0,i.kt)("li",{parentName:"ul"},"Test Cases: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/buffering-unsized-types/buffering-unsized-types-1"},(0,i.kt)("inlineCode",{parentName:"a"},"vec-considerations-1")))),(0,i.kt)("p",null,"Avoid using fallible methods like ",(0,i.kt)("inlineCode",{parentName:"p"},"insert"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pop"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"push"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"set")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"peek"),"  with an unsized (dynamically sized) type. To prevent the contract for panicking, use ",(0,i.kt)("inlineCode",{parentName:"p"},"try_")," (fallible) storage methods."),(0,i.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,i.kt)("p",null,"Consider the following ",(0,i.kt)("inlineCode",{parentName:"p"},"ink!")," contract:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'    #[ink(message)]\n    pub fn do_something(&mut self, data: String) {\n        let caller = self.env().caller();\n        let example = format!("{caller:?}: {data}");\n\n        // Panics if data overgrows the static buffer size!\n        self.on_chain_log.insert(caller, &example);\n    }\n')),(0,i.kt)("p",null,"The problem arises from the use of ",(0,i.kt)("inlineCode",{parentName:"p"},".insert()")," since ",(0,i.kt)("inlineCode",{parentName:"p"},"ink!"),"'s static buffer defaults to 16KB in size. If data overgrows this size, the contract will ",(0,i.kt)("inlineCode",{parentName:"p"},"panic!"),"."),(0,i.kt)("p",null,"The vulnerable code example can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/buffering-unsized-types/buffering-unsized-types-1/vulnerable-example"},(0,i.kt)("inlineCode",{parentName:"a"},"here")),"."),(0,i.kt)("h2",{id:"remediation"},"Remediation"),(0,i.kt)("p",null,"Instead, when working with dynamically sized values, use fallible storage methods. For instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(message)]\n        pub fn do_something2(&mut self, data: String) -> Result<(), Error> {\n            let caller = self.env().caller();\n\n            match self.on_chain_log.try_insert(caller, &data) {\n                Ok(_) => Ok(()),\n                Err(_) => Err(Error::InsertFailed),\n            }\n        }\n")),(0,i.kt)("p",null,"The remediated code example can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/buffering-unsized-types/buffering-unsized-types-1/remediated-example"},(0,i.kt)("inlineCode",{parentName:"a"},"here")),"."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/ink_storage/5.0.0/ink_storage/struct.StorageVec.html"},"https://docs.rs/ink_storage/5.0.0/ink_storage/struct.StorageVec.html")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://use.ink/datastructures/storagevec/"},"https://use.ink/datastructures/storagevec/"))))}d.isMDXComponent=!0}}]);