"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[9363],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(2564),a=(n(9496),n(9613));const o={},l="Integer overflow and integer underflow",i={unversionedId:"vulnerabilities/integer-overflow-or-underflow",id:"vulnerabilities/integer-overflow-or-underflow",title:"Integer overflow and integer underflow",description:"Description",source:"@site/docs/vulnerabilities/1-integer-overflow-or-underflow.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/integer-overflow-or-underflow",permalink:"/scout/docs/vulnerabilities/integer-overflow-or-underflow",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/vulnerabilities/1-integer-overflow-or-underflow.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Vulnerabilities",permalink:"/scout/docs/vulnerabilities/"},next:{title:"Set Contract Storage",permalink:"/scout/docs/vulnerabilities/set-contract-storage"}},s={},u=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Deployment",id:"deployment",level:3},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"integer-overflow-and-integer-underflow"},"Integer overflow and integer underflow"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Arithmetic")),(0,a.kt)("li",{parentName:"ul"},"Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Critical")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/integer-overflow-or-underflow"},(0,a.kt)("inlineCode",{parentName:"a"},"integer-overflow-or-underflow"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/integer-overflow-or-underflow/integer-overflow-or-underflow-1"},(0,a.kt)("inlineCode",{parentName:"a"},"integer-overflow-or-underflow-1")))),(0,a.kt)("p",null,"This type of vulnerability occurs when an arithmetic operation attempts to\ncreate a numeric value that is outside the valid range in substrate, e.g,\nan ",(0,a.kt)("inlineCode",{parentName:"p"},"u8")," unsigned integer can be at most ",(0,a.kt)("em",{parentName:"p"},"M:=2^8-1=255"),", hence the sum ",(0,a.kt)("em",{parentName:"p"},"M+1"),"\nproduces an overflow. "),(0,a.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,a.kt)("p",null,"There follows a snippet of a simple ",(0,a.kt)("inlineCode",{parentName:"p"},"ink!")," smart contract that is vulnerable to\nan integer overflow vulnerability."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(message)]\npub fn add(&mut self, value: u8) {\n    self.value += value;\n}\n\n#[ink(message)]\npub fn sub(&mut self, value: u8) {\n    self.value -= value;\n}\n")),(0,a.kt)("p",null,"The above contract stores a single value of type ",(0,a.kt)("inlineCode",{parentName:"p"},"u8")," and provides three\nfunctions allowing interaction with the single value.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"add()")," function allows users to add a specified amount to the stored value,\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"sub()")," function allows users to subtract a specified amount, while the\n",(0,a.kt)("inlineCode",{parentName:"p"},"get()")," function allows users to retrieve the current value."),(0,a.kt)("p",null,"This contract is vulnerable to an integer overflow attack that may be exercised\nif a user adds a value that exceeds the maximum value that can be stored in an\n",(0,a.kt)("inlineCode",{parentName:"p"},"u8")," variable, then the addition operation overflows the variable and the value\nwraps to zero (ignoring the carry), potentially leading to unexpected behavior."),(0,a.kt)("p",null,"This vulnerability is effectively realized if overflow and underflow checks are\ndisabled at the time of compilation. This can be done by modifying the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file with the following configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},"[profile.release]\noverflow-checks = false\n")),(0,a.kt)("p",null,"This way, the overflow checks will be disabled whenever the contract is built\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"release")," profile. More info can be found\n",(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/reference/profiles.html"},"here"),". "),(0,a.kt)("p",null,"Please note that if the check is enabled, the vulnerability will not be exploitable, but a panic error will be raised. Raising a panic error is not the recommended way to handle this type of issue. In the Remediation section below, we explain a better approach to address it."),(0,a.kt)("p",null,"To deploy this smart contract, you would need to compile it using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ink!"),"\ncompiler and deploy it to a Polkadot Substrate network using a suitable\ndeployment tool such as Polkadot JS. Once deployed, users could interact with\nthe contract by calling its functions using a compatible wallet or blockchain\nexplorer."),(0,a.kt)("p",null,"The vulnerable code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/blob/main/test-cases/integer-overflow-or-underflow/integer-overflow-or-underflow-1/vulnerable-example/lib.rs"},"here"),"."),(0,a.kt)("h3",{id:"deployment"},"Deployment"),(0,a.kt)("p",null,"Before deployment, the contract must be built using the tool ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo-contract"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cargo contract build --release\n")),(0,a.kt)("p",null,"Following that, the contract can be deployed either by using ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo-contract"),"\nor a GUI tool (e.g., ",(0,a.kt)("a",{parentName:"p",href:"https://contracts-ui.substrate.io/"},"https://contracts-ui.substrate.io/"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cargo contract instantiate --constructor new --args 0 --suri //Alice\n")),(0,a.kt)("h2",{id:"remediation"},"Remediation"),(0,a.kt)("p",null,"Even though enabling the overflow/underflow checks in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," would eliminate the possibility of the\nvulnerability being realized, a panic error would still be raised."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},"[profile.release]\noverflow-checks = true\n")),(0,a.kt)("p",null,"All in all, considering that this check might be disabled and that raising a panic error is not the best way to handle this issue, it is recommended that the code be changed to explicitly use checked, overflowing, or saturating arithmetic. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\npub enum Error {\n    /// An overflow was produced while adding\n    OverflowError,\n    /// An underflow was produced while substracting\n    UnderflowError,\n}\n')),(0,a.kt)("p",null,"The problematic functions can be updated as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(message)]\npub fn add(&mut self, value: u8) -> Result<(), Error> {\n    match self.value.checked_add(value) {\n        Some(v) => self.value = v,\n        None => return Err(Error::OverflowError),\n    };\n    Ok(())\n}\n\n#[ink(message)]\npub fn sub(&mut self, value: u8) -> Result<(), Error> {\n    match self.value.checked_sub(value) {\n        Some(v) => self.value = v,\n        None => return Err(Error::UnderflowError),\n    };\n    Ok(())\n}\n")),(0,a.kt)("p",null,"The remediated code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/blob/main/test-cases/integer-overflow-or-underflow/integer-overflow-or-underflow-1/remediated-example/lib.rs"},"here"),"."),(0,a.kt)("p",null,"Other rules could be added to improve the checking. The set of rules can be found ",(0,a.kt)("a",{parentName:"p",href:"https://rust-lang.github.io/rust-clippy/master/"},"here"),"."),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://swcregistry.io/docs/SWC-101"},"SWC-101")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://ethernaut.openzeppelin.com/level/0x63bE8347A617476CA461649897238A31835a32CE"},"Ethernaut: Token")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/ethereum/solidity/issues/796#issuecomment-253578925"},"20 cases of overflow/underflow")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://blog.sigmaprime.io/solidity-security.html#ouflow"},"https://blog.sigmaprime.io/solidity-security.html#ouflow"))))}d.isMDXComponent=!0}}]);