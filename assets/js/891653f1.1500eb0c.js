"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[1756],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,m=p["".concat(l,".").concat(d)]||p[d]||f[d]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4206:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(2564),i=(n(9496),n(9613));const a={},o="Avoid Unsafe Block",s={unversionedId:"vulnerabilities/avoid-unsafe-block",id:"vulnerabilities/avoid-unsafe-block",title:"Avoid Unsafe Block",description:"Description",source:"@site/docs/vulnerabilities/26-avoid-unsafe-block.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/avoid-unsafe-block",permalink:"/scout/docs/vulnerabilities/avoid-unsafe-block",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/26-avoid-unsafe-block.md",tags:[],version:"current",sidebarPosition:26,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Buffering Unsized Types",permalink:"/scout/docs/vulnerabilities/buffering-unsized-types"},next:{title:"Warning sr25519_verify",permalink:"/scout/docs/vulnerabilities/warning-sr25519-verify"}},l={},u=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],c={toc:u},p="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"avoid-unsafe-block"},"Avoid Unsafe Block"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,i.kt)("inlineCode",{parentName:"li"},"Best practices")),(0,i.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,i.kt)("inlineCode",{parentName:"li"},"Enhancement")),(0,i.kt)("li",{parentName:"ul"},"Detectors: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/avoid-unsafe-block"},(0,i.kt)("inlineCode",{parentName:"a"},"avoid-unsafe-block"))),(0,i.kt)("li",{parentName:"ul"},"Test Cases: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/avoid-unsafe-block/avoid-unsafe-block-1"},(0,i.kt)("inlineCode",{parentName:"a"},"avoid-unsafe-block-1")))),(0,i.kt)("p",null,"The use of ",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe")," blocks in Rust is discouraged because they bypass Rust's memory safety checks, potentially leading to issues like undefined behavior and security vulnerabilities."),(0,i.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,i.kt)("p",null,"Rust enforces memory safety at compile time. When using an ",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe")," block in Rust, it's up to the programmer to take this security measure into acount. However, this could lead to memory issues. For instance, disregarding the borrow checker, or dereferencing a null pointer. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(message)]\n    pub fn unsafe_function(&mut self, n: u64) -> u64 {\n        unsafe {\n            let mut i = n as f64;\n            let mut y = i.to_bits();\n            y = 0x5fe6ec85e7de30da - (y >> 1);\n            i = f64::from_bits(y);\n            i *= 1.5 - 0.5 * n as f64 * i * i;\n            i *= 1.5 - 0.5 * n as f64 * i * i;\n\n            let result_ptr: *mut f64 = &mut i;\n\n            (*result_ptr).to_bits()\n        }\n    }\n")),(0,i.kt)("h2",{id:"remediation"},"Remediation"),(0,i.kt)("p",null,"To enforce memory safety, it's recommended not to use ",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe"),". "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(message)]\n    pub fn safe_function(&mut self, n: u64) -> u64 {\n        let mut i = n as f64;\n        let mut y = i.to_bits();\n        y = 0x5fe6ec85e7de30da - (y >> 1);\n        i = f64::from_bits(y);\n        i *= 1.5 - 0.5 * n as f64 * i * i;\n        i *= 1.5 - 0.5 * n as f64 * i * i;\n\n        let result = &mut i;\n        result.to_bits()    \n    }\n")),(0,i.kt)("p",null,"The remediated code example can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/blob/main/test-cases/avoid-unsafe-block/avoid-unsafe-block-1/remediated-example/src/lib.rs"},(0,i.kt)("inlineCode",{parentName:"a"},"here")),"."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html"},"https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html"))))}f.isMDXComponent=!0}}]);