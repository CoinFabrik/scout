"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[4915],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,v=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(v,l(l({ref:t},p),{},{components:n})):a.createElement(v,l({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(2564),r=(n(9496),n(9613));const i={},l="Lazy values not set",o={unversionedId:"vulnerabilities/lazy-values-not-set",id:"vulnerabilities/lazy-values-not-set",title:"Lazy values not set",description:"Description",source:"@site/docs/vulnerabilities/28-lazy-values-not-set.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/lazy-values-not-set",permalink:"/scout/docs/vulnerabilities/lazy-values-not-set",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/28-lazy-values-not-set.md",tags:[],version:"current",sidebarPosition:28,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Warning sr25519_verify",permalink:"/scout/docs/vulnerabilities/warning-sr25519-verify"},next:{title:"Avoid autokey upgradable",permalink:"/scout/docs/vulnerabilities/avoid-autokey-upgradable"}},s={},u=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"Known Issues",id:"known-issues",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lazy-values-not-set"},"Lazy values not set"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,r.kt)("inlineCode",{parentName:"li"},"Best Practices")),(0,r.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,r.kt)("inlineCode",{parentName:"li"},"Critical")),(0,r.kt)("li",{parentName:"ul"},"Detectors: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/lazy-values-not-set/"},(0,r.kt)("inlineCode",{parentName:"a"},"lazy-values-not-set"))),(0,r.kt)("li",{parentName:"ul"},"Test Cases: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/lazy-values-not-set/lazy-values-not-set-1"},(0,r.kt)("inlineCode",{parentName:"a"},"lazy-values-not-set-1")))),(0,r.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,r.kt)("p",null,"Consider the following contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(storage)]\n    pub struct Contract {\n        mapping: Mapping<AccountId, u64>,\n    }\n    impl Contract {\n        /* --- snip --- */\n        #[ink(message)]\n        pub fn sum(&mut self, value: u64) -> Result<(), Error> {\n            let key = self.env().caller();\n            let mut _val = self.mapping.get(key).unwrap_or_default();\n            _val += value;\n            Ok(())\n        }\n        /* --- snip --- */\n    }\n")),(0,r.kt)("p",null,"In this case, when you ",(0,r.kt)("inlineCode",{parentName:"p"},".get(...)")," a value from a ",(0,r.kt)("inlineCode",{parentName:"p"},"Lazy")," storage field, you ",(0,r.kt)("em",{parentName:"p"},"probably")," want to mutate it. The values are not automatically flushed to storage, so you need to ",(0,r.kt)("inlineCode",{parentName:"p"},".set(...)")," it."),(0,r.kt)("h2",{id:"remediation"},"Remediation"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},".set(...)")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".insert(...)")," method after using ",(0,r.kt)("inlineCode",{parentName:"p"},".get(...)")," to flush the new value to storage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(storage)]\n    pub struct Contract {\n        mapping: Mapping<AccountId, u64>,\n    }\n    impl Contract {\n        /* --- snip --- */\n        #[ink(message)]\n        pub fn sum(&mut self, value: u64) -> Result<(), Error> {\n            let key = self.env().caller();\n            let mut _val = self.mapping.get(key).unwrap_or_default();\n            _val += value;\n            self.mapping.insert(key, value);\n            Ok(())\n        }\n        /* --- snip --- */\n    }\n")),(0,r.kt)("h2",{id:"known-issues"},"Known Issues"),(0,r.kt)("p",null,"If you have a ",(0,r.kt)("inlineCode",{parentName:"p"},".get(...)")," function that you don't mutate (e.g., used as a const value), this detector triggers, if you want to ignore the lint you could add ",(0,r.kt)("inlineCode",{parentName:"p"},"#[allow(lazy_values_not_set)]")," immediately before the function definition."))}m.isMDXComponent=!0}}]);