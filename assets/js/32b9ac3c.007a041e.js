"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[2136],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},817:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(2564),a=(n(9496),n(9613));const i={},o="Buffering Unsized Types",s={unversionedId:"detectors/buffering-unsized-types",id:"detectors/buffering-unsized-types",title:"Buffering Unsized Types",description:"What it does",source:"@site/docs/detectors/25-buffering-unsized-types.md",sourceDirName:"detectors",slug:"/detectors/buffering-unsized-types",permalink:"/scout/docs/detectors/buffering-unsized-types",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/detectors/25-buffering-unsized-types.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Incorrect Exponentiation",permalink:"/scout/docs/detectors/incorrect-exponentiation"},next:{title:"Avoid Unsafe Block",permalink:"/scout/docs/detectors/avoid-unsafe-block"}},l={},c=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"buffering-unsized-types"},"Buffering Unsized Types"),(0,a.kt)("h3",{id:"what-it-does"},"What it does"),(0,a.kt)("p",null,"It checks for the correct use of fallible methods when reading/writing data into ",(0,a.kt)("inlineCode",{parentName:"p"},"StorageVec")," type variables."),(0,a.kt)("h3",{id:"why-is-this-bad"},"Why is this bad?"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"StorageVec")," is a Lazy type. Hence the static buffer to store the encoded data is of limited size. Because of that, reading/writing methods can fail and trap the contract."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    #[ink(message)]\n    pub fn do_something(&mut self, data: String) {\n        let caller = self.env().caller();\n\n        let example = format!("{caller:?}: {data}");\n\n        // Panics if data overgrows the static buffer size!\n        self.on_chain_log.insert(caller, &example);\n    }\n')),(0,a.kt)("p",null,"Use instead:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(message)]\n        pub fn do_something2(&mut self, data: String) -> Result<(), Error> {\n            let caller = self.env().caller();\n\n            match self.on_chain_log.try_insert(caller, &data) {\n                Ok(_) => Ok(()),\n                Err(_) => Err(Error::InsertFailed),\n            }\n        }\n")),(0,a.kt)("h3",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,"The detector's implementation can be found at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/blob/main/detectors/buffering-unsized-types"},"this link"),"."))}d.isMDXComponent=!0}}]);