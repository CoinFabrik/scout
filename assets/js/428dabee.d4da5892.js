"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[4667],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7100:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(2564),a=(n(9496),n(9613));const i={},o="Don't use instantiate_contract_v1",s={unversionedId:"vulnerabilities/dont-use-instantiate-contract-v1",id:"vulnerabilities/dont-use-instantiate-contract-v1",title:"Don't use instantiate_contract_v1",description:"Description",source:"@site/docs/vulnerabilities/33-dont-use-instantiate-contract-v1.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/dont-use-instantiate-contract-v1",permalink:"/scout/docs/vulnerabilities/dont-use-instantiate-contract-v1",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/33-dont-use-instantiate-contract-v1.md",tags:[],version:"current",sidebarPosition:33,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Lazy values not set",permalink:"/scout/docs/vulnerabilities/lazy-values-not-set"},next:{title:"Detectors",permalink:"/scout/docs/detectors/"}},c={},l=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dont-use-instantiate_contract_v1"},"Don't use instantiate_contract_v1"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Best Practices")),(0,a.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Enhancement")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors"},(0,a.kt)("inlineCode",{parentName:"a"},"dont-use-instantiate-contract-v1"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases"},(0,a.kt)("inlineCode",{parentName:"a"},"dont-use-instantiate-contract-v1")))),(0,a.kt)("p",null,"Avoid using ",(0,a.kt)("inlineCode",{parentName:"p"},"instantiate_contract_v1")," as it is a low level way to evaluate another smart contract. If needed, use ",(0,a.kt)("inlineCode",{parentName:"p"},"instantiate_contract")," instead. Also, use methods on a ",(0,a.kt)("inlineCode",{parentName:"p"},"ContractRef")," or the ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateBuilder")," through ",(0,a.kt)("inlineCode",{parentName:"p"},"build_create")," if possible."),(0,a.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,a.kt)("p",null,"Consider the following example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    impl MyContract {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self {}\n        }\n\n        #[ink(message)]\n        pub fn instantiate_contract(&self) -> MyContractRef {\n            let create_params = build_create::<OtherContractRef>()\n                .instantiate_v1()\n                .code_hash(Hash::from([0x42; 32]))\n                .gas_limit(500_000_000)\n                .endowment(25)\n                .exec_input(\n                    ExecutionInput::new(Selector::new(ink::selector_bytes!("new")))\n                        .push_arg(42)\n                        .push_arg(true)\n                        .push_arg(&[0x10u8; 32]),\n                )\n                .salt_bytes(&[0xCA, 0xFE, 0xBA, 0xBE])\n                .returns::<OtherContractRef>()\n                .params();\n            self.env()\n                .instantiate_contract_v1(&create_params)\n                .unwrap_or_else(|error| {\n                    panic!(\n                        "Received an error from the Contracts pallet while instantiating: {:?}",\n                        error\n                    )\n                })\n                .unwrap_or_else(|error| {\n                    panic!("Received a `LangError` while instatiating: {:?}", error)\n                })\n        }\n    }\n')),(0,a.kt)("h2",{id:"remediation"},"Remediation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    impl MyContract {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self {}\n        }\n\n        #[ink(message)]\n        pub fn instantiate_contract(&self) -> MyContractRef {\n            let create_params = build_create::<OtherContractRef>()\n                .code_hash(Hash::from([0x42; 32]))\n                .ref_time_limit(500_000_000)\n                .proof_size_limit(100_000)\n                .storage_deposit_limit(500_000_000_000)\n                .endowment(25)\n                .exec_input(\n                    ExecutionInput::new(Selector::new(ink::selector_bytes!("new")))\n                        .push_arg(42)\n                        .push_arg(true)\n                        .push_arg(&[0x10u8; 32]),\n                )\n                .salt_bytes(&[0xCA, 0xFE, 0xBA, 0xBE])\n                .returns::<OtherContractRef>()\n                .params();\n            self.env()\n                .instantiate_contract(&create_params)\n                .unwrap_or_else(|error| {\n                    panic!(\n                        "Received an error from the Contracts pallet while instantiating: {:?}",\n                        error\n                    )\n                })\n                .unwrap_or_else(|error| {\n                    panic!("Received a `LangError` while instatiating: {:?}", error)\n                })\n        }\n    }\n')),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/ink_env/5.0.0/ink_env/fn.instantiate_contract_v1.html"},"https://docs.rs/ink_env/5.0.0/ink_env/fn.instantiate_contract_v1.html"))))}d.isMDXComponent=!0}}]);