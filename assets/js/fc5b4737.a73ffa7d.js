"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[9357],{9613:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",v={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,m=p["".concat(c,".").concat(d)]||p[d]||v[d]||l;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8610:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>v,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=t(2564),a=(t(9496),t(9613));const l={},i="Don't use invoke_contract_v1",o={unversionedId:"vulnerabilities/dont-use-invoke-contract-v1",id:"vulnerabilities/dont-use-invoke-contract-v1",title:"Don't use invoke_contract_v1",description:"Description",source:"@site/docs/vulnerabilities/32-dont-use-invoke-contract-v1.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/dont-use-invoke-contract-v1",permalink:"/scout/docs/vulnerabilities/dont-use-invoke-contract-v1",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/32-dont-use-invoke-contract-v1.md",tags:[],version:"current",sidebarPosition:32,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Vec could be mapping",permalink:"/scout/docs/vulnerabilities/vec-could-be-mapping"},next:{title:"Don't use instantiate_contract_v1",permalink:"/scout/docs/vulnerabilities/dont-use-instantiate-contract-v1"}},c={},s=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],u={toc:s},p="wrapper";function v(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dont-use-invoke_contract_v1"},"Don't use invoke_contract_v1"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Best Practices")),(0,a.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Enhancement")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/dont-use-invoke-contract-v1"},(0,a.kt)("inlineCode",{parentName:"a"},"dont-use-invoke-contract-v1"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/dont-use-invoke-contract-v1"},(0,a.kt)("inlineCode",{parentName:"a"},"dont-use-invoke-contract-v1")))),(0,a.kt)("p",null,"Avoid using ",(0,a.kt)("inlineCode",{parentName:"p"},"invoke_contract_v1")," as it is a low level way to evaluate another smart contract. If needed, use ",(0,a.kt)("inlineCode",{parentName:"p"},"invoke_contract")," instead."),(0,a.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,a.kt)("p",null,"Consider the following example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'        /// Calls the given address with the given amount and selector.\n        #[ink(message)]\n        pub fn call_with_value(\n            &mut self,\n            address: AccountId,\n            amount: Balance,\n            selector: u32,\n        ) -> Balance {\n            ink::env::debug_println!(\n                "call_with_value function called from {:?}",\n                self.env().caller()\n            );\n            let caller_addr = self.env().caller();\n            let caller_balance = self.balances.get(caller_addr).unwrap_or(0);\n            if amount <= caller_balance {\n                //The call is built without allowing reentrancy calls\n                let call = build_call::<ink::env::DefaultEnvironment>()\n                    .call_v1(address)\n                    .transferred_value(amount)\n                    .exec_input(ink::env::call::ExecutionInput::new(Selector::new(\n                        selector.to_be_bytes(),\n                    )))\n                    .returns::<()>()\n                    .params();\n                self.env()\n                    .invoke_contract_v1(&call)\n                    .unwrap_or_else(|err| panic!("Err {:?}", err))\n                    .unwrap_or_else(|err| panic!("LangErr {:?}", err));\n                self.balances\n                    .insert(caller_addr, &(caller_balance - amount));\n\n            Ok(())\n                caller_balance - amount\n            } else {\n                caller_balance\n            }\n        }\n')),(0,a.kt)("h2",{id:"remediation"},"Remediation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    // Dont use it altogether or use invoke_contract but beware it can have several Errors.\n    #[ink(message)]\n    pub fn call_with_value(\n            &mut self,\n            address: AccountId,\n            amount: Balance,\n            selector: u32,\n        ) -> Balance {\n            ink::env::debug_println!(\n                "call_with_value function called from {:?}",\n                self.env().caller()\n            );\n            let caller_addr = self.env().caller();\n            let caller_balance = self.balances.get(caller_addr).unwrap_or(0);\n            if amount <= caller_balance {\n                //The call is built without allowing reentrancy calls\n                let call = build_call::<ink::env::DefaultEnvironment>()\n                    .call(address)\n                    .transferred_value(amount)\n                    .exec_input(ink::env::call::ExecutionInput::new(Selector::new(\n                        selector.to_be_bytes(),\n                    )))\n                    .returns::<()>()\n                    .params();\n                self.env()\n                    .invoke_contract(&call)\n                    .unwrap_or_else(|err| panic!("Err {:?}", err))\n                    .unwrap_or_else(|err| panic!("LangErr {:?}", err));\n                self.balances\n                    .insert(caller_addr, &(caller_balance - amount));\n\n                caller_balance - amount\n            } else {\n                caller_balance\n            }\n        }\n')),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/ink_env/5.0.0/ink_env/fn.invoke_contract_v1.html"},"https://docs.rs/ink_env/5.0.0/ink_env/fn.invoke_contract_v1.html"))))}v.isMDXComponent=!0}}]);