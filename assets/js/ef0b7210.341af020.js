"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[5417],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),y=r,m=c["".concat(u,".").concat(y)]||c[y]||d[y]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=y;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(2564),r=(n(9496),n(9613));const o={},i="Avoid autokey upgradable",l={unversionedId:"vulnerabilities/avoid-autokey-upgradable",id:"vulnerabilities/avoid-autokey-upgradable",title:"Avoid autokey upgradable",description:"Description",source:"@site/docs/vulnerabilities/29-avoid-autokey-upgradable.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/avoid-autokey-upgradable",permalink:"/scout/docs/vulnerabilities/avoid-autokey-upgradable",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/29-avoid-autokey-upgradable.md",tags:[],version:"current",sidebarPosition:29,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Lazy values not set",permalink:"/scout/docs/vulnerabilities/lazy-values-not-set"},next:{title:"Non payable transferred value",permalink:"/scout/docs/vulnerabilities/non-payable-transferred-value"}},u={},s=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],p={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"avoid-autokey-upgradable"},"Avoid autokey upgradable"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,r.kt)("inlineCode",{parentName:"li"},"Upgradability")),(0,r.kt)("li",{parentName:"ul"},"Vulnerability Severity:",(0,r.kt)("inlineCode",{parentName:"li"},"Critical")),(0,r.kt)("li",{parentName:"ul"},"Detectors: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/avoid-autokey-upgradable"},(0,r.kt)("inlineCode",{parentName:"a"},"avoid-autokey-upgradable"))),(0,r.kt)("li",{parentName:"ul"},"Test Cases: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/avoid-autokey-upgradable/avoid-autokey-upgradable-1"},(0,r.kt)("inlineCode",{parentName:"a"},"avoid-autokey-upgradable-1")))),(0,r.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,r.kt)("p",null,"Consider the following contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(storage)]\n    pub struct AvoidAutoKeyUpgradable {\n        balances: Mapping<AccountId, Balances>,\n        total_supply: Lazy<Balance>,\n    }\n\n    pub enum Error {\n        NotAnAdmin,\n        FailedSetCodeHash,\n    }\n\n    impl Contract {\n        /* --- snip --- */\n        #[ink(message)]\n        pub fn upgrade_contract(&self, value: [u8; 32]) -> Result<(), Error> {\n            if self.admin != Self::env().caller() {\n                return Err(Error::NotAnAdmin);\n            }\n\n            match self.env().set_code_hash(&value.into()) {\n                Ok(_) => Ok(()),\n                Err(_) => Err(Error::FailedSetCodeHash),\n            }\n        }\n        /* --- snip --- */\n    }\n\n")),(0,r.kt)("p",null,"When you have a contract that has any kind of ",(0,r.kt)("inlineCode",{parentName:"p"},"Lazy")," storage (",(0,r.kt)("inlineCode",{parentName:"p"},"Lazy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapping")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"StorageVec"),") and your contract is upgradable, you need to ensure that every ",(0,r.kt)("inlineCode",{parentName:"p"},"Lazy")," storage has a manual key. If you don't do this, the compiler can assign a new key to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Lazy")," storage when you upgrade the contract, and you will lose all that data."),(0,r.kt)("h2",{id:"remediation"},"Remediation"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"ManualKey")," to ensure that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Lazy")," storage has a fixed key. You can use either a literal value or an Enum variant."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"    pub enum Keys {\n        TotalSupply,\n    }\n\n    #[ink(storage)]\n    pub struct AvoidAutoKeyUpgradable {\n        balances: Mapping<AccountId, Balances, ManualKey<0xDEAD>>,\n        total_supply: Lazy<Balance, ManualKey<TotalSupply>>,\n    }\n\n    pub enum Error {\n        NotAnAdmin,\n        FailedSetCodeHash,\n    }\n\n    impl Contract {\n        /* --- snip --- */\n        #[ink(message)]\n        pub fn upgrade_contract(&self, value: [u8; 32]) -> Result<(), Error> {\n            if self.admin != Self::env().caller() {\n                return Err(Error::NotAnAdmin);\n            }\n\n            match self.env().set_code_hash(&value.into()) {\n                Ok(_) => Ok(()),\n                Err(_) => Err(Error::FailedSetCodeHash),\n            }\n        }\n        /* --- snip --- */\n    }\n")),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://use.ink/datastructures/storage-layout"},"https://use.ink/datastructures/storage-layout"))))}d.isMDXComponent=!0}}]);