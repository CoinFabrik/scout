"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[3529],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(9496);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=n.createContext({}),l=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(r),m=o,f=u["".concat(d,".").concat(m)]||u[m]||p[m]||a;return r?n.createElement(f,s(s({ref:t},c),{},{components:r})):n.createElement(f,s({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7927:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(2564),o=(r(9496),r(9613));const a={},s="Zero or test address",i={unversionedId:"detectors/zero-or-test-address",id:"detectors/zero-or-test-address",title:"Zero or test address",description:"What it does",source:"@site/docs/detectors/12-zero-or-test-address.md",sourceDirName:"detectors",slug:"/detectors/zero-or-test-address",permalink:"/scout/docs/detectors/zero-or-test-address",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/detectors/12-zero-or-test-address.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Delegate call",permalink:"/scout/docs/detectors/delegate-call"},next:{title:"Insuficciently random values",permalink:"/scout/docs/detectors/insufficiently-random-values"}},d={},l=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}],c={toc:l},u="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"zero-or-test-address"},"Zero or test address"),(0,o.kt)("h3",{id:"what-it-does"},"What it does"),(0,o.kt)("p",null,"Checks whether the zero address is being inputed to a function without validation."),(0,o.kt)("h3",{id:"why-is-this-bad"},"Why is this bad?"),(0,o.kt)("p",null,"Because the private key for the zero address is known, anyone could take ownership of the contract."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(message)]\npub fn modify_admin(&mut self, admin: AccountId) -> Result<AccountId, Error> {\n    if self.admin != self.env().caller() {\n        return Err(Error::NotAuthorized);\n    }\n\n    self.admin = admin;\n    Ok(self.admin)\n}\n")),(0,o.kt)("p",null,"Use instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(message)]\npub fn modify_admin(&mut self, admin: AccountId) -> Result<AccountId, Error> {\n    if self.admin != self.env().caller() {\n        return Err(Error::NotAuthorized);\n    }\n\n    if admin == AccountId::from([0x0; 32]) {\n        return Err(Error::InvalidAddress);\n    }\n\n    self.admin = admin;\n    Ok(self.admin)\n}\n")),(0,o.kt)("h3",{id:"implementation"},"Implementation"),(0,o.kt)("p",null,"The detector's implementation can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/zero-or-test-address"},"this link"),"."))}p.isMDXComponent=!0}}]);