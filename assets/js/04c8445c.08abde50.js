"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[8921],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),f=a,b=c["".concat(s,".").concat(f)]||c[f]||d[f]||i;return n?r.createElement(b,l(l({ref:t},p),{},{components:n})):r.createElement(b,l({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8289:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(2564),a=(n(9496),n(9613));const i={},l="Non payable transferred value",o={unversionedId:"vulnerabilities/non-payable-transferred-value",id:"vulnerabilities/non-payable-transferred-value",title:"Non payable transferred value",description:"Description",source:"@site/docs/vulnerabilities/30-non-payable-transferred-value.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/non-payable-transferred-value",permalink:"/scout/docs/vulnerabilities/non-payable-transferred-value",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/30-non-payable-transferred-value.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Avoid autokey upgradable",permalink:"/scout/docs/vulnerabilities/avoid-autokey-upgradable"},next:{title:"Vec could be mapping",permalink:"/scout/docs/vulnerabilities/vec-could-be-mapping"}},s={},u=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"non-payable-transferred-value"},"Non payable transferred value"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Best practices")),(0,a.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Enhancement")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/non-payable-transferred-value"},(0,a.kt)("inlineCode",{parentName:"a"},"non-payable-transferred-value"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/non-payable-transferred-value/non-payable-transferred-value-1"},(0,a.kt)("inlineCode",{parentName:"a"},"non-payable-transferred-value-1")))),(0,a.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,a.kt)("p",null,"Consider the following function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(message)]\n    pub fn something(&self) -> bool {\n        self.env().transferred_value() > 0\n    }\n")),(0,a.kt)("p",null,"This function is not payable as it does not have the ",(0,a.kt)("inlineCode",{parentName:"p"},"#[ink(payable)]")," attribute, but it checks for ",(0,a.kt)("inlineCode",{parentName:"p"},"self.env().transferred_value()")," and it will always evaluate to ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," if the function is not payable."),(0,a.kt)("h2",{id:"remediation"},"Remediation"),(0,a.kt)("p",null,"Make the function ",(0,a.kt)("inlineCode",{parentName:"p"},"payable")," if you want to check the transferred value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(message, payable)]\n    pub fn something(&self) -> bool {\n        self.env().transferred_value() > 0\n    }\n")))}d.isMDXComponent=!0}}]);