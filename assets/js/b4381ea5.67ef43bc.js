"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[4298],{9613:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),s=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=a,f=p["".concat(o,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,u(u({ref:n},c),{},{components:t})):r.createElement(f,u({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,u=new Array(i);u[0]=m;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[p]="string"==typeof e?e:a,u[1]=l;for(var s=2;s<i;s++)u[s]=t[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>u,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(2564),a=(t(9496),t(9613));const i={},u="Unused return enum",l={unversionedId:"vulnerabilities/unused-return-enum",id:"vulnerabilities/unused-return-enum",title:"Unused return enum",description:"Description",source:"@site/docs/vulnerabilities/5-unused-return-enum.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/unused-return-enum",permalink:"/scout/docs/vulnerabilities/unused-return-enum",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/5-unused-return-enum.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Panic Error",permalink:"/scout/docs/vulnerabilities/panic-error"},next:{title:"DoS unbounded operation",permalink:"/scout/docs/vulnerabilities/dos-unbounded-operation"}},o={},s=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],c={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unused-return-enum"},"Unused return enum"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Validations and error handling")),(0,a.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Minor")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/unused-return-enum"},(0,a.kt)("inlineCode",{parentName:"a"},"unused-return-enum"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/unused-return-enum/unused-return-enum-1"},(0,a.kt)("inlineCode",{parentName:"a"},"unused-return-enum-1")))),(0,a.kt)("p",null,"Ink messages can return a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum with a custom error type. This is\nuseful for the caller to know what went wrong when the message fails. The\ndefinition in Rust of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n")),(0,a.kt)("p",null,"If any of the variants is not used, the code could be simplified or it could\nimply a bug."),(0,a.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,a.kt)("p",null,"In order to perform this exploit we work through the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\npub enum TradingPairErrors {\n    Overflow,\n}\n\n#[ink(message)]\npub fn get_percentage_difference(\n    &mut self,\n    value1: Balance,\n    value2: Balance\n) -> Result<Balance, TradingPairErrors>  {\n    let absolute_difference = value1.abs_diff(value2);\n    let sum = value1 + value2;\n    let percentage_difference =\n        match 100u128.checked_mul(absolute_difference / sum) {\n            Some(result) => result,\n            None => panic!("overflow!"),\n    };\n    return Err(TradingPairErrors::Overflow);\n}\n')),(0,a.kt)("p",null,"This is an ",(0,a.kt)("inlineCode",{parentName:"p"},"ink!")," message that returns the percentage difference between two values."),(0,a.kt)("p",null,"The function then returns an error enum variant ",(0,a.kt)("inlineCode",{parentName:"p"},"TradingPairErrors::Overflow"),".\nHowever, the function never returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum variant ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),", thus always\nfailing."),(0,a.kt)("p",null,"The vulnerable code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/unused-return-enum/unused-return-enum-1/vulnerable-example"},"here"),"."),(0,a.kt)("h2",{id:"remediation"},"Remediation"),(0,a.kt)("p",null,"This function could be easily fixed by returning a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum variant ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),"\nwhen the percentage difference is calculated successfully. By providing a check in\nthe linter that ensures that all the variants of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum are used, this\nbug could have been avoided. This is shown in the example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\npub enum TradingPairErrors {\n    Overflow,\n}\n\n#[ink(message)]\npub fn get_percentage_difference(\n    &mut self,\n    value1: Balance,\n    value2: Balance\n) -> Result<Balance, TradingPairErrors>  {\n    let absolute_difference = value1.abs_diff(value2);\n    let sum = value1 + value2;\n    match 100u128.checked_mul(absolute_difference / sum) {\n        Some(result) => Ok(result),\n        None => Err(TradingPairErrors::Overflow)\n    }\n}\n')),(0,a.kt)("p",null,"The remediated code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/unused-return-enum/unused-return-enum-1/remediated-example"},"here"),"."),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/RottenKiwi/Panorama-Swap-INK-SC/blob/main/trading_pair_azero/lib.rs"},"https://github.com/RottenKiwi/Panorama-Swap-INK-SC/blob/main/trading_pair_azero/lib.rs"))))}d.isMDXComponent=!0}}]);