"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[2038],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,m=p["".concat(l,".").concat(d)]||p[d]||f[d]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(2564),o=(n(9496),n(9613));const i={},a="Avoid Unsafe Block",s={unversionedId:"detectors/avoid-unsafe-block",id:"detectors/avoid-unsafe-block",title:"Avoid Unsafe Block",description:"What it does",source:"@site/docs/detectors/26-avoid-unsafe-block.md",sourceDirName:"detectors",slug:"/detectors/avoid-unsafe-block",permalink:"/scout/docs/detectors/avoid-unsafe-block",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/detectors/26-avoid-unsafe-block.md",tags:[],version:"current",sidebarPosition:26,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Buffering Unsized Types",permalink:"/scout/docs/detectors/buffering-unsized-types"},next:{title:"Warning sr25519_verify",permalink:"/scout/docs/detectors/warning-sr25519-verify"}},l={},c=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}],u={toc:c},p="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"avoid-unsafe-block"},"Avoid Unsafe Block"),(0,o.kt)("h3",{id:"what-it-does"},"What it does"),(0,o.kt)("p",null,"It tells not to use ",(0,o.kt)("inlineCode",{parentName:"p"},"Unsafe Rust"),"."),(0,o.kt)("h3",{id:"why-is-this-bad"},"Why is this bad?"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Unsafe Rust")," does not enforce memory safety guarantees at compile time."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(message)]\n    pub fn unsafe_function(&mut self, n: u64) -> u64 {\n        unsafe {\n            let mut i = n as f64;\n            let mut y = i.to_bits();\n            y = 0x5fe6ec85e7de30da - (y >> 1);\n            i = f64::from_bits(y);\n            i *= 1.5 - 0.5 * n as f64 * i * i;\n            i *= 1.5 - 0.5 * n as f64 * i * i;\n\n            let result_ptr: *mut f64 = &mut i;\n\n            (*result_ptr).to_bits()\n        }\n    }\n")),(0,o.kt)("p",null,"Use instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    #[ink(message)]\n    pub fn safe_function(&mut self, n: u64) -> u64 {\n        let mut i = n as f64;\n        let mut y = i.to_bits();\n        y = 0x5fe6ec85e7de30da - (y >> 1);\n        i = f64::from_bits(y);\n        i *= 1.5 - 0.5 * n as f64 * i * i;\n        i *= 1.5 - 0.5 * n as f64 * i * i;\n\n        let result = &mut i;\n\n        result.to_bits()    \n    }\n")),(0,o.kt)("h3",{id:"implementation"},"Implementation"),(0,o.kt)("p",null,"The detector's implementation can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/avoid-unsafe-block"},"this link"),"."))}f.isMDXComponent=!0}}]);