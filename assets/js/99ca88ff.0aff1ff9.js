"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[649],{9613:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>f});var n=i(9496);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var p=n.createContext({}),c=function(e){var t=n.useContext(p),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(i),m=r,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return i?n.createElement(f,a(a({ref:t},s),{},{components:i})):n.createElement(f,a({ref:t},s))}));function f(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=i[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},3659:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=i(2564),r=(i(9496),i(9613));const o={},a="Divide before multiply",l={unversionedId:"vulnerabilities/divide-before-multiply",id:"vulnerabilities/divide-before-multiply",title:"Divide before multiply",description:"Description",source:"@site/docs/vulnerabilities/10-divide-before-multiply.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/divide-before-multiply",permalink:"/scout/docs/vulnerabilities/divide-before-multiply",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/10-divide-before-multiply.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Unsafe unwrap",permalink:"/scout/docs/vulnerabilities/unsafe-unwrap"},next:{title:"Delegate Call",permalink:"/scout/docs/vulnerabilities/delegate-call"}},p={},c=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],s={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,n.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"divide-before-multiply"},"Divide before multiply"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,r.kt)("inlineCode",{parentName:"li"},"Arithmetic")),(0,r.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,r.kt)("inlineCode",{parentName:"li"},"Medium")),(0,r.kt)("li",{parentName:"ul"},"Detectors: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/divide-before-multiply"},(0,r.kt)("inlineCode",{parentName:"a"},"divide-before-multiply"))),(0,r.kt)("li",{parentName:"ul"},"Test Cases: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/divide-before-multiply/divide-before-multiply-1"},(0,r.kt)("inlineCode",{parentName:"a"},"divide-before-multiply-1")))),(0,r.kt)("p",null,"In Rust, the order of operations can influence the precision of the result, especially in integer arithmetic. Performing a division operation before a multiplication can lead to a loss of precision as division between integers might return zero. This issue can have serious consequences in programs such as smart contracts where numerical precision is critical."),(0,r.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,r.kt)("p",null,"Consider the following ",(0,r.kt)("inlineCode",{parentName:"p"},"ink!")," contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink::contract]\nmod divide_before_multiply {\n\n    #[ink(storage)]\n    pub struct FloatingPointAndNumericalPrecision {}\n\n    impl FloatingPointAndNumericalPrecision {\n        /// Creates a new FloatingPointAndNumericalPrecision contract.\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self {}\n        }\n\n        /// Calculates the profit for a given percentage of the total profit.\n        #[ink(message)]\n        pub fn split_profit(&self, percentage: u64, total_profit: u64) -> u64 {\n            (percentage / 100) * total_profit\n        }\n    }\n}\n")),(0,r.kt)("p",null,"In this contract, the ",(0,r.kt)("inlineCode",{parentName:"p"},"split_profit")," function divides the ",(0,r.kt)("inlineCode",{parentName:"p"},"percentage")," by ",(0,r.kt)("inlineCode",{parentName:"p"},"100")," before multiplying it with ",(0,r.kt)("inlineCode",{parentName:"p"},"total_profit"),". This could lead to a loss of precision if ",(0,r.kt)("inlineCode",{parentName:"p"},"percentage")," is less than ",(0,r.kt)("inlineCode",{parentName:"p"},"100")," as the division would return ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". This could lead to incorrect calculations and potential financial loss in a real-world smart contract."),(0,r.kt)("p",null,"The vulnerable code example can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/divide-before-multiply/divide-before-multiply-1/vulnerable-example"},(0,r.kt)("inlineCode",{parentName:"a"},"here")),"."),(0,r.kt)("h2",{id:"remediation"},"Remediation"),(0,r.kt)("p",null,"Reverse the order of operations to ensure multiplication occurs before division."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink::contract]\nmod divide_before_multiply {\n\n    #[ink(storage)]\n    pub struct FloatingPointAndNumericalPrecision {}\n\n    impl FloatingPointAndNumericalPrecision {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self {}\n        }\n\n        #[ink(message)]\n        pub fn split_profit(&self, percentage: u64, total_profit: u64) -> u64 {\n            (percentage * total_profit) / 100\n        }\n    }\n}\n")),(0,r.kt)("p",null,"The remediated code example can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/divide-before-multiply/divide-before-multiply-1/remediated-example"},(0,r.kt)("inlineCode",{parentName:"a"},"here")),"."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators"},"Rust documentation: ",(0,r.kt)("inlineCode",{parentName:"a"},"Integer Division"))))}d.isMDXComponent=!0}}]);