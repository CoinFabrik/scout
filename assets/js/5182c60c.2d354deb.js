"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[9363],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(9496);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(r),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2493:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=r(2564),o=(r(9496),r(9613));const a={},l="Integer overflow or underflow",i={unversionedId:"vulnerabilities/integer-overflow-or-underflow",id:"vulnerabilities/integer-overflow-or-underflow",title:"Integer overflow or underflow",description:"Description",source:"@site/docs/vulnerabilities/1-integer-overflow-or-underflow.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/integer-overflow-or-underflow",permalink:"/scout/docs/vulnerabilities/integer-overflow-or-underflow",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/vulnerabilities/1-integer-overflow-or-underflow.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Vulnerabilities",permalink:"/scout/docs/vulnerabilities/"},next:{title:"Set contract storage",permalink:"/scout/docs/vulnerabilities/set-contract-storage"}},s={},u=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Deployment",id:"deployment",level:3},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integer-overflow-or-underflow"},"Integer overflow or underflow"),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,o.kt)("inlineCode",{parentName:"li"},"Arithmetic")),(0,o.kt)("li",{parentName:"ul"},"Severity: ",(0,o.kt)("inlineCode",{parentName:"li"},"Critical")),(0,o.kt)("li",{parentName:"ul"},"Detectors: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/integer-overflow-or-underflow"},(0,o.kt)("inlineCode",{parentName:"a"},"integer-overflow-or-underflow"))),(0,o.kt)("li",{parentName:"ul"},"Test Cases: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout/tree/main/test-cases/integer-overflow-or-underflow/integer-overflow-or-underflow-1"},(0,o.kt)("inlineCode",{parentName:"a"},"integer-overflow-or-underflow-1")))),(0,o.kt)("p",null,"This type of vulnerability occurs when an arithmetic operation attempts to\ncreate a numeric value that is outside the valid range in substrate, e.g,\nan ",(0,o.kt)("inlineCode",{parentName:"p"},"u8")," unsigned integer can be at most ",(0,o.kt)("em",{parentName:"p"},"M:=2^8-1=255"),", hence the sum ",(0,o.kt)("em",{parentName:"p"},"M+1"),"\nproduces an overflow. "),(0,o.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,o.kt)("p",null,"There follows a snippet of a simple ",(0,o.kt)("inlineCode",{parentName:"p"},"ink!")," smart contract that is vulnerable to\nan integer overflow vulnerability."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(message)]\npub fn add(&mut self, value: u8) {\n    self.value += value;\n}\n\n#[ink(message)]\npub fn sub(&mut self, value: u8) {\n    self.value -= value;\n}\n")),(0,o.kt)("p",null,"The above contract stores a single value of type ",(0,o.kt)("inlineCode",{parentName:"p"},"u8")," and provides three\nfunctions allowing interaction with the single value.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"add()")," function allows users to add a specified amount to the stored value,\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"sub()")," function allows users to subtract a specified amount, while the\n",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," function allows users to retrieve the current value."),(0,o.kt)("p",null,"This contract is vulnerable to an integer overflow attack that may be exercised\nif a user adds a value that exceeds the maximum value that can be stored in an\n",(0,o.kt)("inlineCode",{parentName:"p"},"u8")," variable, then the addition operation overflows the variable and the value\nwraps to zero (ignoring the carry), potentially leading to unexpected behavior."),(0,o.kt)("p",null,"The vulnerable code example can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/blob/main/test-cases/integer-overflow-or-underflow/integer-overflow-or-underflow-1/vulnerable-example/src/lib.rs"},"here"),"."),(0,o.kt)("h3",{id:"deployment"},"Deployment"),(0,o.kt)("p",null,"Before deployment, the contract must be built using the tool ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo-contract"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cargo contract build --release\n")),(0,o.kt)("p",null,"Following that, the contract can be deployed either by using ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo-contract"),"\nor a GUI tool (e.g., ",(0,o.kt)("a",{parentName:"p",href:"https://contracts-ui.substrate.io/"},"https://contracts-ui.substrate.io/"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cargo contract instantiate --constructor new --args 0 --suri //Alice\n")),(0,o.kt)("h2",{id:"remediation"},"Remediation"),(0,o.kt)("p",null,"It is recommended that the code be changed to explicitly use checked, overflowing, or saturating arithmetic. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\npub enum Error {\n    /// An overflow was produced while adding\n    OverflowError,\n    /// An underflow was produced while substracting\n    UnderflowError,\n}\n')),(0,o.kt)("p",null,"The problematic functions can be updated as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(message)]\npub fn add(&mut self, value: u8) -> Result<(), Error> {\n    match self.value.checked_add(value) {\n        Some(v) => self.value = v,\n        None => return Err(Error::OverflowError),\n    };\n    Ok(())\n}\n\n#[ink(message)]\npub fn sub(&mut self, value: u8) -> Result<(), Error> {\n    match self.value.checked_sub(value) {\n        Some(v) => self.value = v,\n        None => return Err(Error::UnderflowError),\n    };\n    Ok(())\n}\n")),(0,o.kt)("p",null,"The remediated code example can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/blob/main/test-cases/integer-overflow-or-underflow/integer-overflow-or-underflow-1/remediated-example/src/lib.rs"},"here"),"."),(0,o.kt)("p",null,"Other rules could be added to improve the checking. The set of rules can be found ",(0,o.kt)("a",{parentName:"p",href:"https://rust-lang.github.io/rust-clippy/master/"},"here"),"."),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://swcregistry.io/docs/SWC-101"},"SWC-101")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/OpenZeppelin/ethernaut/blob/master/contracts/src/levels/Token.sol"},"Ethernaut: Token")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/ethereum/solidity/issues/796#issuecomment-253578925"},"20 cases of overflow/underflow")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://blog.sigmaprime.io/solidity-security.html#ouflow"},"https://blog.sigmaprime.io/solidity-security.html#ouflow"))))}d.isMDXComponent=!0}}]);