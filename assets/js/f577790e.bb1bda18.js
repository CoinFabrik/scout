"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[9302],{9613:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var o=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(r),d=n,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return r?o.createElement(f,i(i({ref:t},u),{},{components:r})):o.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},445:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=r(2564),n=(r(9496),r(9613));const a={},i="Avoid core::mem::forget usage",l={unversionedId:"detectors/avoid-core-mem-forget",id:"detectors/avoid-core-mem-forget",title:"Avoid core::mem::forget usage",description:"What it does",source:"@site/docs/detectors/16-avoid-core-mem-forget.md",sourceDirName:"detectors",slug:"/detectors/avoid-core-mem-forget",permalink:"/scout/docs/detectors/avoid-core-mem-forget",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/detectors/16-avoid-core-mem-forget.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Assert violation",permalink:"/scout/docs/detectors/assert-violation"},next:{title:"Avoid fromat! macro usage",permalink:"/scout/docs/detectors/avoid-format-string"}},s={},c=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}],u={toc:c},m="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"avoid-corememforget-usage"},"Avoid core::mem::forget usage"),(0,n.kt)("h3",{id:"what-it-does"},"What it does"),(0,n.kt)("p",null,"Checks for ",(0,n.kt)("inlineCode",{parentName:"p"},"core::mem::forget")," usage."),(0,n.kt)("h3",{id:"why-is-this-bad"},"Why is this bad?"),(0,n.kt)("p",null,"This is a bad practice because it can lead to memory leaks, resource leaks and logic errors."),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"   #[ink(message)]\n   pub fn forget_value(&mut self) {\n       let forgotten_value = self.value;\n       self.value = false;\n       core::mem::forget(forgotten_value);\n   }\n")),(0,n.kt)("p",null,"Use instead:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"   #[ink(message)]\n   pub fn forget_value(&mut self) {\n       let forgotten_value = self.value;\n       self.value = false;\n       let _ = forgotten_value;\n   }\n\n// or if droppable\n\n    #[ink(message)]\n    pub fn drop_value(&mut self) {\n        let forgotten_value = self.value;\n        self.value = false;\n        forget_value.drop();\n    }\n")),(0,n.kt)("h3",{id:"implementation"},"Implementation"),(0,n.kt)("p",null,"The detector's implementation can be found at ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/avoid-core-mem-forget"},"this link"),"."))}p.isMDXComponent=!0}}]);