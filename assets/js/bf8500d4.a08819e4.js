"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[5458],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(m,u(u({ref:t},c),{},{components:n})):r.createElement(m,u({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,u=new Array(o);u[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,u[1]=i;for(var s=2;s<o;s++)u[s]=n[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(2564),a=(n(9496),n(9613));const o={},u="Unused return enum",i={unversionedId:"detectors/unused-return-enum",id:"detectors/unused-return-enum",title:"Unused return enum",description:"What it does",source:"@site/docs/detectors/5-unused-return-enum.md",sourceDirName:"detectors",slug:"/detectors/unused-return-enum",permalink:"/scout/docs/detectors/unused-return-enum",draft:!1,editUrl:"https://github.com/CoinFabrik/scout/docs/detectors/5-unused-return-enum.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Panic error",permalink:"/scout/docs/detectors/panic-error"},next:{title:"DoS unbounded operation",permalink:"/scout/docs/detectors/dos-unbounded-operation"}},l={},s=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Known problems",id:"known-problems",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}],c={toc:s},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unused-return-enum"},"Unused return enum"),(0,a.kt)("h3",{id:"what-it-does"},"What it does"),(0,a.kt)("p",null,"It warns if a fuction that returns a Result type does not return a Result enum variant (Ok/Err)"),(0,a.kt)("h3",{id:"why-is-this-bad"},"Why is this bad?"),(0,a.kt)("p",null,"If any of the variants (Ok/Err) is not used, the code could be simplified or it could imply a bug."),(0,a.kt)("h3",{id:"known-problems"},"Known problems"),(0,a.kt)("p",null,"If definitions of Err() and/or Ok() are in the code but do not flow to the return value due to the definition of a variable or because they are defined in a dead code block, the warning will not be shown. If the definitions are made in an auxiliary method, the warning will be shown, resulting in a false positive."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// example code where a warning is issued\n    #![cfg_attr(not(feature = "std"), no_std)]\n    pub enum TradingPairErrors {\n        Overflow,\n    }\n    (...)\n    #[ink(message)]\n    pub fn get_percentage_difference(&mut self, value1: Balance, value2: Balance) -> Result<Balance, TradingPairErrors>  {\n        let absolute_difference = value1.abs_diff(value2);\n        let sum = value1 + value2;\n        let percentage_difference =\n        match 100u128.checked_mul(absolute_difference / sum) {\n           Some(result) => result,\n           None => Err(TradingPairErrors::Overflow),\n        }\n    }\n')),(0,a.kt)("p",null,"Use instead:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// example code that does not raise a warning\n    #![cfg_attr(not(feature = "std"), no_std)]\n    pub enum TradingPairErrors {\n        Overflow,\n    }\n    (...)\n    #[ink(message)]\n    pub fn get_percentage_difference(&mut self, value1: Balance, value2: Balance) -> Result<Balance, TradingPairErrors>  {\n        let absolute_difference = value1.abs_diff(value2);\n        let sum = value1 + value2;\n        let percentage_difference =\n        match 100u128.checked_mul(absolute_difference / sum) {\n           Some(result) => Ok(result),\n           None => panic!("overflow!"),\n        };\n        return Err(TradingPairErrors::Overflow);\n    }\n')),(0,a.kt)("h3",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,"The detector's implementation can be found at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout/tree/main/detectors/unused-return-enum"},"this link"),"."))}p.isMDXComponent=!0}}]);